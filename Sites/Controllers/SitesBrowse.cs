/* Copyright © 2018 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/Sites#License */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YetaWF.Core.Controllers;
using YetaWF.Core.DataProvider;
using YetaWF.Core.Menus;
using YetaWF.Core.Models;
using YetaWF.Core.Models.Attributes;
using YetaWF.Core.Modules;
using YetaWF.Core.Site;
using YetaWF.Core.Views.Shared;
using YetaWF.Modules.Sites.Modules;
#if MVC6
using Microsoft.AspNetCore.Mvc;
#else
using System.Web.Mvc;
#endif

namespace YetaWF.Modules.Sites.Controllers {

    public class SitesBrowseModuleController : ControllerImpl<YetaWF.Modules.Sites.Modules.SitesBrowseModule> {

        public class BrowseItem {

            [Caption("Actions"), Description("The available actions")]
            [UIHint("ActionIcons"), ReadOnly]
            public MenuList Commands {
                get {
                    MenuList actions = new MenuList() { RenderMode = ModuleAction.RenderModeEnum.IconsOnly };

                    actions.New(Module.GetAction_SiteDisplay(SiteData), ModuleAction.ActionLocationEnum.GridLinks);
                    actions.New(SiteEditModule.GetModuleActionAsync("EditSite", null, SiteDomain).Result, ModuleAction.ActionLocationEnum.GridLinks);//$$$
                    actions.New(ConfirmModule.GetAction_Remove(null, SiteData), ModuleAction.ActionLocationEnum.GridLinks);
                    return actions;
                }
            }

            [Caption("Site Domain"), Description("The domain name of the site")]
            [UIHint("String"), ReadOnly]
            public string SiteDomain { get; set; }

            [Caption("Default Site"), Description("Shows whether the site is the default site for this instance of YetaWF - the default site cannot be removed")]
            [UIHint("Boolean"), ReadOnly]
            public bool IsDefaultSite { get; set; }

            [Caption("Site Name"), Description("The name associated with your site, usually your company name or your name")]
            [UIHint("String"), ReadOnly]
            public string SiteName { get; set; }

            [Caption("Site Id"), Description("The id associated with your site, generated by YetaWF when the site is created")]
            [UIHint("IntValue"), ReadOnly]
            public int Identity { get; set; }

            private SitesBrowseModule Module { get; set; }
            private ModuleDefinition SiteEditModule { get; set; }
            private SiteDefinition SiteData { get; set; }
            private ConfirmRemovalModule ConfirmModule { get; set; }

            public BrowseItem(SitesBrowseModule module, ModuleDefinition siteEditModule, ConfirmRemovalModule confirmModule, SiteDefinition site) {
                Module = module;
                SiteData = site;
                SiteEditModule = siteEditModule;
                ConfirmModule = confirmModule;
                ObjectSupport.CopyData(site, this);
                Identity = site.Identity;
            }
        }

        public class BrowseModel {
            [UIHint("Grid")]
            public GridDefinition GridDef { get; set; }
        }

        [AllowGet]
        public ActionResult SitesBrowse() {
            BrowseModel model = new BrowseModel { };
            model.GridDef = new GridDefinition {
                AjaxUrl = GetActionUrl("SitesBrowse_GridData"),
                ModuleGuid = Module.ModuleGuid,
                RecordType = typeof(BrowseItem),
                SettingsModuleGuid = Module.PermanentGuid,
            };
            return View(model);
        }

        [AllowPost]
        [ConditionalAntiForgeryToken]
        public async Task<ActionResult> SitesBrowse_GridData(int skip, int take, List<DataProviderSortInfo> sort, List<DataProviderFilterInfo> filters, Guid settingsModuleGuid) {
            ModuleDefinition siteEditModule = await ModuleDefinition.LoadAsync(new Guid("522296A0-B03B-49b7-B849-AB4149466E0D"));
            ConfirmRemovalModule confirmModule = new ConfirmRemovalModule();

            DataProviderGetRecords<SiteDefinition> info = await SiteDefinition.GetSitesAsync(skip, take, sort, filters);
            GridHelper.SaveSettings(skip, take, sort, filters, settingsModuleGuid);
            return GridPartialView(new DataSourceResult {
                Data = (from s in info.Data select new BrowseItem(Module, siteEditModule, confirmModule, s)).ToList<object>(),
                Total = info.Total
            });
        }
    }
}