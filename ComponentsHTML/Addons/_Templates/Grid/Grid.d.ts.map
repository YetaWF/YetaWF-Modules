{"version":3,"sources":["AddOns/YetaWF/ComponentsHTML/_Templates/Grid/Grid.ts"],"names":[],"mappings":"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","file":"Grid.d.ts","sourcesContent":["/* Copyright ï¿½ 2019 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/ComponentsHTML#License */\r\n\r\n// Kendo UI menu use\r\n\r\nnamespace YetaWF_ComponentsHTML {\r\n\r\n    export interface IPackageLocs {\r\n        GridTotals: string;\r\n        GridTotal0: string;\r\n        GridTotalNone: string;\r\n    }\r\n\r\n    interface GridSetup {\r\n        CanSort: boolean;\r\n        CanFilter: boolean;\r\n        CanReorder: boolean;\r\n        ShowPager: boolean;\r\n        FieldName: string;\r\n        AjaxUrl: string;\r\n        StaticData: any[] | null;\r\n        Page: number;\r\n        PageSize: number;\r\n        Records: number;\r\n        Pages: number;\r\n        Columns: GridColumnDefinition[];\r\n        FilterMenusHTML: string;\r\n        MinColumnWidth: number;\r\n        SaveSettingsColumnWidthsUrl: string;\r\n        ExtraData: any;\r\n        HoverCss: string;\r\n        HighlightCss: string;\r\n        DisabledCss: string;\r\n        RowHighlightCss: string;\r\n        RowDragDropHighlightCss: string;\r\n        SortActiveCss: string;\r\n        SettingsModuleGuid: string;\r\n        HighlightOnClick: boolean;\r\n\r\n        DeletedMessage: string;\r\n        DeleteConfirmationMessage: string;\r\n        DeletedColumnDisplay: string;\r\n\r\n        NoSubmitContents: boolean;\r\n    }\r\n    interface GridColumnDefinition {\r\n        Name: string;\r\n        Sortable: boolean;\r\n        Sort: SortByEnum;\r\n        OnlySubmitWhenChecked: boolean;\r\n        Locked: boolean;\r\n        FilterOp: FilterOptionEnum | null;\r\n        FilterType: string;\r\n        FilterId: string;\r\n        MenuId: string;\r\n    }\r\n    enum SortByEnum {\r\n        NotSpecified = 0,\r\n        Ascending = 1,\r\n        Descending = 2\r\n    }\r\n    enum FilterOptionEnum {\r\n        Equal = 1,\r\n        NotEqual = 2,\r\n        LessThan = 3,\r\n        LessEqual = 4,\r\n        GreaterThan = 5,\r\n        GreaterEqual = 6,\r\n        StartsWith = 7,\r\n        NotStartsWith = 8,\r\n        Contains = 9,\r\n        NotContains = 10,\r\n        Endswith = 11,\r\n        NotEndswith = 12,\r\n        All = 0xFFFF\r\n    }\r\n    interface OverrideColumnFilter {\r\n        ColIndex: number;\r\n        FilterOp: FilterOptionEnum;\r\n    }\r\n    interface GridPartialResult {\r\n        Records: number;\r\n        TBody: string;\r\n        Pages: number;\r\n        Page: number;\r\n        PageSize: number;\r\n    }\r\n    enum FilterBoolEnum {\r\n        All = 0,\r\n        Yes = 1,\r\n        No = 2\r\n    }\r\n\r\n    export class Grid extends YetaWF.ComponentBaseDataImpl {\r\n\r\n        public static readonly SELECTOR: string = \".yt_grid\";\r\n\r\n        private Setup: GridSetup;\r\n\r\n        private BtnReload: HTMLDivElement | null = null;\r\n        private BtnSearch: HTMLDivElement | null = null;\r\n        private BtnTop: HTMLDivElement | null = null;\r\n        private BtnPrev: HTMLDivElement | null = null;\r\n        private BtnNext: HTMLDivElement | null = null;\r\n        private BtnBottom: HTMLDivElement | null = null;\r\n        private FilterBar: HTMLDivElement | null = null;\r\n        private PagerTotals: HTMLDivElement | null = null;\r\n        private InputPage: YetaWF_ComponentsHTML.IntValueEditComponent | null = null;\r\n        private SelectPageSize: YetaWF_ComponentsHTML.DropDownListEditComponent | null = null;\r\n        private ColumnResizeBar: HTMLElement | null = null;\r\n        private ColumnResizeHeader: HTMLTableHeaderCellElement | null = null;\r\n        private TBody: HTMLElement;\r\n        private LoadingDiv: HTMLDivElement | null = null;\r\n        private static CurrentControl: Grid | null = null;// current control during grid resize\r\n        private SubmitCheckCol: number = -1;// column with checkbox determining whether to submit record\r\n        private reloadInProgress: boolean = false;\r\n        private reorderingInProgress: boolean = false;\r\n        private reorderingRowElement: HTMLTableRowElement | null = null;\r\n\r\n        constructor(controlId: string, setup: GridSetup) {\r\n            super(controlId);\r\n            this.Setup = setup;\r\n\r\n            ComponentsHTMLHelper.MUSTHAVE_JQUERYUI();\r\n\r\n            this.TBody = $YetaWF.getElement1BySelector(\"tbody\", [this.Control]);\r\n\r\n            if (this.Setup.ShowPager) {\r\n                this.BtnReload = $YetaWF.getElement1BySelectorCond(\".tg_reload\", [this.Control]) as HTMLDivElement | null;\r\n                this.BtnSearch = $YetaWF.getElement1BySelectorCond(\".tg_search\", [this.Control]) as HTMLDivElement | null;\r\n                this.BtnTop = $YetaWF.getElement1BySelectorCond(\".tg_pgtop\", [this.Control]) as HTMLDivElement | null;\r\n                this.BtnPrev = $YetaWF.getElement1BySelectorCond(\".tg_pgprev\", [this.Control]) as HTMLDivElement | null;\r\n                this.BtnNext = $YetaWF.getElement1BySelectorCond(\".tg_pgnext\", [this.Control]) as HTMLDivElement | null;\r\n                this.BtnBottom = $YetaWF.getElement1BySelectorCond(\".tg_pgbottom\", [this.Control]) as HTMLDivElement | null;\r\n                this.PagerTotals = $YetaWF.getElement1BySelectorCond(\".tg_totals\", [this.Control]) as HTMLDivElement | null;\r\n                if (this.Setup.PageSize) {\r\n                    this.InputPage = YetaWF.ComponentBaseDataImpl.getControlFromSelector<IntValueEditComponent>(\"input[name$='.__Page']\", IntValueEditComponent.SELECTOR, [this.Control]);\r\n                    this.SelectPageSize = YetaWF.ComponentBaseDataImpl.getControlFromSelector<DropDownListEditComponent>(\"select[name$='.__PageSelection']\", DropDownListEditComponent.SELECTOR, [this.Control]);\r\n                }\r\n            }\r\n            this.FilterBar = $YetaWF.getElement1BySelectorCond(\".tg_filter\", [this.Control]) as HTMLDivElement | null;\r\n\r\n            this.updateStatus();\r\n\r\n            $YetaWF.registerEventHandler(this.Control, \"mouseover\", \".tg_header th, .tg_filter .tg_button, .tg_pager .tg_button\", (ev: MouseEvent): boolean => {\r\n                if (!$YetaWF.elementHasClass(ev.__YetaWFElem, this.Setup.HoverCss))\r\n                    $YetaWF.elementAddClass(ev.__YetaWFElem, this.Setup.HoverCss);\r\n                return true;\r\n            });\r\n            $YetaWF.registerEventHandler(this.Control, \"mouseout\", \".tg_header th, .tg_filter .tg_button, .tg_pager .tg_button\", (ev: MouseEvent): boolean => {\r\n                $YetaWF.elementRemoveClass(ev.__YetaWFElem, this.Setup.HoverCss);\r\n                return true;\r\n            });\r\n            $YetaWF.registerEventHandler(this.Control, \"mouseover\", \".tg_resize\", (ev: MouseEvent): boolean => {\r\n                // don't allow mouseover to propagate and close tooltips\r\n                $YetaWF.closeOverlays();\r\n                return false;\r\n            });\r\n            // Show/hide filter bar with search button\r\n            if (this.Setup.CanFilter && this.BtnSearch && this.FilterBar) {\r\n                $YetaWF.registerEventHandler(this.BtnSearch, \"click\", null, (ev: MouseEvent): boolean => {\r\n                    var filterBar = this.FilterBar as HTMLElement;\r\n                    if ($YetaWF.isVisible(filterBar))\r\n                        filterBar.style.display = \"none\";\r\n                    else\r\n                        filterBar.style.display = \"\";\r\n                    return false;\r\n                });\r\n            }\r\n            // Reload\r\n            if (this.BtnReload) {\r\n                $YetaWF.registerEventHandler(this.BtnReload, \"click\", null, (ev: MouseEvent): boolean => {\r\n                    if (!$YetaWF.elementHasClass(ev.__YetaWFElem, this.Setup.DisabledCss))\r\n                        this.reload(this.Setup.Page);\r\n                    return false;\r\n                });\r\n                $YetaWF.registerModuleRefresh(this.Control, (mod: HTMLElement): void => {\r\n                    this.reload(this.Setup.Page);\r\n                });\r\n            }\r\n            if (!this.Setup.StaticData)\r\n                this.LoadingDiv = $YetaWF.getElement1BySelectorCond(\".tg_loading\", [this.Control]) as HTMLDivElement;\r\n            // Nav buttons\r\n            if (this.BtnTop) {\r\n                $YetaWF.registerEventHandler(this.BtnTop, \"click\", null, (ev: MouseEvent): boolean => {\r\n                    if (!$YetaWF.elementHasClass(ev.__YetaWFElem, this.Setup.DisabledCss)) {\r\n                        if (this.Setup.Page >= 0)\r\n                            this.reload(0);\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            if (this.BtnPrev) {\r\n                $YetaWF.registerEventHandler(this.BtnPrev, \"click\", null, (ev: MouseEvent): boolean => {\r\n                    if (!$YetaWF.elementHasClass(ev.__YetaWFElem, this.Setup.DisabledCss)) {\r\n                        var page = this.Setup.Page - 1;\r\n                        if (page >= 0)\r\n                            this.reload(page);\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            if (this.BtnNext) {\r\n                $YetaWF.registerEventHandler(this.BtnNext, \"click\", null, (ev: MouseEvent): boolean => {\r\n                    if (!$YetaWF.elementHasClass(ev.__YetaWFElem, this.Setup.DisabledCss)) {\r\n                        var page = this.Setup.Page + 1;\r\n                        if (page < this.Setup.Pages)\r\n                            this.reload(page);\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            if (this.BtnBottom) {\r\n                $YetaWF.registerEventHandler(this.BtnBottom, \"click\", null, (ev: MouseEvent): boolean => {\r\n                    if (!$YetaWF.elementHasClass(ev.__YetaWFElem, this.Setup.DisabledCss)) {\r\n                        var page = this.Setup.Pages - 1;\r\n                        if (page >= 0)\r\n                            this.reload(page);\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            // Page input\r\n            if (this.InputPage) {\r\n                $YetaWF.registerEventHandler(this.InputPage.Control, \"keydown\", null, (ev: KeyboardEvent): boolean => {\r\n                    if (ev.keyCode === 13 && this.InputPage) { // Return\r\n                        var page = this.InputPage.value - 1;\r\n                        this.reload(page);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n            }\r\n            // pagesize selection\r\n            if (this.SelectPageSize) {\r\n                this.SelectPageSize.Control.addEventListener(\"dropdownlist_change\", (evt: Event): void => {\r\n                    if (this.SelectPageSize)\r\n                        this.reload(0, Number(this.SelectPageSize.value));\r\n                });\r\n            }\r\n            // Column resizing\r\n            $YetaWF.registerEventHandler(this.Control, \"mousedown\", \".tg_resize\", (ev: MouseEvent): boolean => {\r\n                if (!this.reloadInProgress) {\r\n                    Grid.CurrentControl = this;\r\n                    this.ColumnResizeBar = ev.__YetaWFElem;\r\n                    this.ColumnResizeHeader = $YetaWF.elementClosest(this.ColumnResizeBar, \"th\") as HTMLTableHeaderCellElement;\r\n                    document.body.style.cursor = \"col-resize\";\r\n                    window.addEventListener(\"mousemove\", Grid.resizeColumn, false);\r\n                    window.addEventListener(\"mouseup\", Grid.resizeColumnDone, false);\r\n                }\r\n                return false;\r\n            });\r\n            // Sorting\r\n            if (this.Setup.CanSort) {\r\n                $YetaWF.registerEventHandler(this.Control, \"click\", \".tg_header th\", (ev: MouseEvent): boolean => {\r\n                    if (!this.reloadInProgress) {\r\n                        var colIndex = Array.prototype.indexOf.call((ev.__YetaWFElem.parentElement as HTMLElement).children, ev.__YetaWFElem);\r\n                        if (colIndex < 0 || colIndex >= this.Setup.Columns.length) throw `Invalid column index ${colIndex} - max is ${this.Setup.Columns.length}`;/*DEBUG*/\r\n                        var col = this.Setup.Columns[colIndex];\r\n                        if (col.Sortable) {\r\n                            if (col.Sort === SortByEnum.NotSpecified) {\r\n                                this.clearSorts();\r\n                                this.setSortOrder(col, colIndex, SortByEnum.Ascending);\r\n                            } else if (col.Sort === SortByEnum.Descending) {\r\n                                this.setSortOrder(col, colIndex, SortByEnum.Ascending);\r\n                            } else {\r\n                                this.setSortOrder(col, colIndex, SortByEnum.Descending);\r\n                            }\r\n                            this.reload(0, undefined, undefined, undefined, true);\r\n                        }\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            // Filtering\r\n            if (this.Setup.CanFilter && this.FilterBar) {\r\n                $YetaWF.registerEventHandler(this.FilterBar, \"click\", \".tg_fmenu\", (ev: MouseEvent): boolean => {\r\n                    var filter = $YetaWF.elementClosest(ev.__YetaWFElem, \".tg_filter\");\r\n                    var head = $YetaWF.elementClosest(ev.__YetaWFElem, \"th\");\r\n                    var colIndex = Array.prototype.indexOf.call(filter.children, head);\r\n                    var ulElem = $YetaWF.getElementById(this.Setup.Columns[colIndex].MenuId);\r\n                    if ($YetaWF.isVisible(ulElem))\r\n                        $(ulElem).hide();\r\n                    else {\r\n                        $YetaWF.closeOverlays();\r\n                        $(ulElem).show();\r\n                        $(ulElem).position({ //jQuery-ui use\r\n                            my: \"left top\",\r\n                            at: \"left bottom\",\r\n                            of: $(ev.__YetaWFElem),\r\n                            collision: \"flip\"\r\n                        });\r\n                    }\r\n                    return false;\r\n                });\r\n                $YetaWF.registerEventHandler(this.FilterBar, \"click\", \".tg_fclear\", (ev: MouseEvent): boolean => {\r\n                    var filter = $YetaWF.elementClosest(ev.__YetaWFElem, \".tg_filter\");\r\n                    var head = $YetaWF.elementClosest(ev.__YetaWFElem, \"th\");\r\n                    var colIndex = Array.prototype.indexOf.call(filter.children, head);\r\n                    this.clearColSortValue(colIndex);\r\n                    this.reload(0);\r\n                    return false;\r\n                });\r\n                $YetaWF.registerEventHandlerBody(\"mousedown\", null, (ev: MouseEvent): boolean => {\r\n                    if (ev.which !== 1) return true;\r\n                    var menus = $YetaWF.getElementsBySelector(\".yt_grid_menus ul.k-menu\");\r\n                    for (let menu of menus) {\r\n                        if ($YetaWF.isVisible(menu)) {\r\n                            setTimeout(() => {\r\n                                $(menu).hide();\r\n                            }, 200);\r\n                        }\r\n                    }\r\n                    return true;\r\n                });\r\n                this.addDirectFilterHandlers();\r\n\r\n                $YetaWF.addWhenReadyOnce((tag: HTMLElement): void => {\r\n                    $YetaWF.appendMixedHTML(document.body, `\r\n<div id='${this.ControlId}_menus' class='yt_grid_menus' data-grid='${this.ControlId}'>\r\n    ${this.Setup.FilterMenusHTML}\r\n</div>`);\r\n                });\r\n            }\r\n            // Delete action (static only)\r\n            if (this.Setup.StaticData) {\r\n                $YetaWF.registerEventHandler(this.Control, \"click\", \"[name='DeleteAction']\", (ev: MouseEvent): boolean => {\r\n                    if (!this.Setup.StaticData) return true;\r\n                    // find the record number to delete\r\n                    var trElem = $YetaWF.elementClosest(ev.__YetaWFElem, \"tr\");\r\n                    var recNum = Number($YetaWF.getAttribute(trElem, \"data-origin\"));\r\n\r\n                    var message = this.Setup.DeleteConfirmationMessage;\r\n                    var colName = this.Setup.DeletedColumnDisplay;\r\n                    if (message) {\r\n                        if (colName) {\r\n                            var text = this.Setup.StaticData[recNum][colName];\r\n                            message = message.format(text);\r\n                        }\r\n                        $YetaWF.alertYesNo(message, undefined, (): void => {\r\n                            this.removeRecord(trElem, recNum, colName);\r\n                        });\r\n                    } else\r\n                        this.removeRecord(trElem, recNum, colName);\r\n                    return false;\r\n                });\r\n            }\r\n            // Selection\r\n            $YetaWF.registerEventHandler(this.TBody, \"mousedown\", \"tr:not(.tg_emptytr)\", (ev: MouseEvent): boolean => {\r\n                var clickedElem = ev.__YetaWFElem;\r\n                if (this.Setup.HighlightOnClick) {\r\n                    if (clickedElem.parentElement !== this.TBody) {\r\n                        // something in a row was clicked (nested grid), find the real row\r\n                        for (;;) {\r\n                            if (clickedElem.parentElement == null)\r\n                                return true;\r\n                            clickedElem = clickedElem.parentElement;\r\n                            if (clickedElem.tagName === \"TR\" && clickedElem.parentElement === this.TBody)\r\n                                break;\r\n                        }\r\n                    }\r\n                    if ($YetaWF.elementHasClass(clickedElem, this.Setup.RowHighlightCss)) {\r\n                        if (this.Setup.CanReorder && this.Setup.StaticData && this.Setup.StaticData.length > 1) {\r\n                            // reordering\r\n                            this.reorderingRowElement = clickedElem as HTMLTableRowElement;\r\n                            this.reorderingInProgress = true;\r\n                            //console.log(\"Reordering starting\");\r\n                            $YetaWF.elementToggleClass(this.reorderingRowElement, this.Setup.RowHighlightCss, false);\r\n                            $YetaWF.elementToggleClass(this.reorderingRowElement, this.Setup.RowDragDropHighlightCss, true);\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    }\r\n                    var trs = $YetaWF.getElementsBySelector(\"tr:not(.tg_emptytr)\", [this.TBody]);\r\n                    for (let tr of trs)\r\n                        $YetaWF.elementToggleClass(tr, this.Setup.RowHighlightCss, false);\r\n                    $YetaWF.elementToggleClass(clickedElem, this.Setup.RowHighlightCss, true);\r\n\r\n                    var event = document.createEvent(\"Event\");\r\n                    event.initEvent(\"grid_selectionchange\", true, true);\r\n                    this.Control.dispatchEvent(event);\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            // Drag & drop\r\n            $YetaWF.registerEventHandlerBody(\"mousemove\", null, (ev: MouseEvent): boolean => {\r\n                if (this.reorderingInProgress) {\r\n\r\n                    //console.log(\"Reordering...\")\r\n\r\n                    var rect = this.TBody.getBoundingClientRect();\r\n                    if (ev.clientX < rect.left || ev.clientX > rect.left + rect.width ||\r\n                        ev.clientY < rect.top || ev.clientY > rect.top + rect.height) {\r\n\r\n                        this.cancelDragDrop();\r\n                        return true;\r\n                    }\r\n                    var sel = this.SelectedIndex();\r\n                    if (sel < 0) {\r\n                        this.cancelDragDrop();\r\n                        return true;\r\n                    }\r\n\r\n                    var insert = this.HitTestInsert(ev.clientX, ev.clientY);\r\n                    //console.log(`insert = ${insert}  sel = ${sel}`);\r\n                    if (insert === sel || insert === sel + 1)\r\n                        return true;// nothing to move\r\n\r\n                    this.moveRawRecord(sel, insert);\r\n                }\r\n                return true;\r\n            });\r\n            $YetaWF.registerEventHandler(this.TBody, \"mouseup\", null, (ev: MouseEvent): boolean => {\r\n                if (this.reorderingInProgress) {\r\n\r\n                    this.doneDragDrop();\r\n\r\n                }\r\n                return true;\r\n            });\r\n            // OnlySubmitWhenChecked\r\n            if (this.Setup.StaticData && this.Setup.NoSubmitContents) {\r\n                this.SubmitCheckCol = this.getSubmitCheckCol();\r\n                if (this.SubmitCheckCol >= 0) {\r\n                    this.setInitialSubmitStatus();\r\n                    // update static data with new checkbox value\r\n                    $YetaWF.registerEventHandler(this.TBody, \"change\", `tr td:nth-child(${this.SubmitCheckCol + 1}) input[type='checkbox']`, (ev: Event): boolean => {\r\n                        if (!this.Setup.StaticData) return true;\r\n                        var tr = $YetaWF.elementClosest(ev.__YetaWFElem, \"tr\");\r\n                        var recNum = Number($YetaWF.getAttribute(tr, \"data-origin\"));\r\n                        var val = (ev.__YetaWFElem as HTMLInputElement).checked;\r\n                        this.Setup.StaticData[recNum][this.Setup.Columns[this.SubmitCheckCol].Name] = val;\r\n                        //$YetaWF.elementToggleClass(tr, YConfigs.Forms.CssFormNoSubmitContents, !val);\r\n                        return false;\r\n                    });\r\n                }\r\n                // handle submit local data\r\n                $YetaWF.Forms.addPreSubmitHandler(true, {\r\n                    form: $YetaWF.Forms.getForm(this.Control),\r\n                    callback: (entry: YetaWF.SubmitHandlerEntry): void => {\r\n                        this.submitLocalData(entry);\r\n                    },\r\n                    userdata: this\r\n                });\r\n            }\r\n        }\r\n        // Drag&drop\r\n        private cancelDragDrop(): void {\r\n            if (this.reorderingRowElement) {\r\n                $YetaWF.elementToggleClass(this.reorderingRowElement, this.Setup.RowHighlightCss, true);\r\n                $YetaWF.elementToggleClass(this.reorderingRowElement, this.Setup.RowDragDropHighlightCss, false);\r\n                this.reorderingRowElement = null;\r\n            }\r\n            this.reorderingInProgress = false;\r\n            //console.log(\"Reordering canceled - left boundary\")\r\n\r\n            var event = document.createEvent(\"Event\");\r\n            event.initEvent(\"grid_dragdropcancel\", true, true);\r\n            this.Control.dispatchEvent(event);\r\n        }\r\n        private doneDragDrop(): void {\r\n            if (this.reorderingRowElement) {\r\n                $YetaWF.elementToggleClass(this.reorderingRowElement, this.Setup.RowHighlightCss, true);\r\n                $YetaWF.elementToggleClass(this.reorderingRowElement, this.Setup.RowDragDropHighlightCss, false);\r\n                this.reorderingRowElement = null;\r\n            }\r\n            this.reorderingInProgress = false;\r\n            //console.log(\"Reordering ended\")\r\n\r\n            var event = document.createEvent(\"Event\");\r\n            event.initEvent(\"grid_dragdropdone\", true, true);\r\n            this.Control.dispatchEvent(event);\r\n        }\r\n        // OnlySubmitWhenChecked\r\n        private setInitialSubmitStatus(): void {\r\n            if (!this.Setup.StaticData || !this.Setup.NoSubmitContents) return;\r\n            //var trs = $YetaWF.getElementsBySelector(\"tr:not(.tg_emptytr)\", [this.TBody]);\r\n            //for (let tr of trs) {\r\n            //    var recNum = Number($YetaWF.getAttribute(tr, \"data-origin\"));\r\n            //    var val = this.Setup.StaticData[recNum][this.Setup.Columns[this.SubmitCheckCol].Name];\r\n            //    $YetaWF.elementToggleClass(tr, YConfigs.Forms.CssFormNoSubmitContents, !val);\r\n            //}\r\n        }\r\n        private getSubmitCheckCol(): number {\r\n            var colIndex: number = -1;\r\n            var cols = this.Setup.Columns.filter((col: GridColumnDefinition, index: number, cols: GridColumnDefinition[]): boolean => {\r\n                if (!col.OnlySubmitWhenChecked) return false;\r\n                colIndex = index;\r\n                return true;\r\n            });\r\n            if (cols.length > 1)\r\n                throw \"More than one column marked OnlySubmitWhenChecked\";\r\n            return colIndex;\r\n        }\r\n        private submitLocalData(entry: YetaWF.SubmitHandlerEntry): void {\r\n            if (!this.Setup.StaticData) return;\r\n            var div = `<div class='${$YetaWF.Forms.DATACLASS}' style='display:none'>`;\r\n            // retrieve all rows and add input/select fields to data div, resequence to make mvc serialization of lists work\r\n            var trs = $YetaWF.getElementsBySelector(\"tr:not(.tg_emptytr)\", [this.TBody]);\r\n            var row = 0;\r\n            var re1 = new RegExp(\"\\\\[[0-9]+\\\\]\\\\.\", \"gim\");\r\n            for (let tr of trs) {\r\n                var recNum = Number($YetaWF.getAttribute(tr, \"data-origin\"));\r\n                var val = this.Setup.StaticData[recNum][this.Setup.Columns[this.SubmitCheckCol].Name];\r\n                if (val) { // add record if the checkbox is selected\r\n                    var copied = false;\r\n                    var inputs = $YetaWF.getElementsBySelector(\"input,select\", [tr]);\r\n                    for (let input of inputs) {\r\n                        var name = $YetaWF.getAttributeCond(input, \"name\");\r\n                        if (name) {\r\n                            var copy = input.cloneNode() as HTMLElement;\r\n                            // replace name with serialized name[row] so mvc serialization works\r\n                            name = name.replace(re1, `[${row.toString()}].`);\r\n                            $YetaWF.setAttribute(copy, \"name\", name);\r\n                            div += copy.outerHTML;\r\n                            copied = true;\r\n                        }\r\n                    }\r\n                    if (copied)\r\n                        ++row;\r\n                }\r\n            }\r\n            div += \"</div>\";\r\n            if (row > 0)\r\n                (entry.form as HTMLElement).insertAdjacentHTML(\"beforeend\", div);\r\n        }\r\n        // sorting\r\n        private clearSorts(): void {\r\n            var colIndex = 0;\r\n            for (let col of this.Setup.Columns) {\r\n                if (col.Sortable) {\r\n                    col.Sort = SortByEnum.NotSpecified;\r\n                    this.setSortOrder(col, colIndex, SortByEnum.NotSpecified);\r\n                }\r\n                ++colIndex;\r\n            }\r\n        }\r\n        private setSortOrder(col: GridColumnDefinition, colIndex: number, sortBy: SortByEnum): void {\r\n            for (let col of this.Setup.Columns) {\r\n                if (col.Sortable)\r\n                    col.Sort = SortByEnum.NotSpecified;\r\n            }\r\n            col.Sort = sortBy;\r\n            // turn indicators in header on or off\r\n            var ths = $YetaWF.getElementsBySelector(\".tg_header th\", [this.Control]);\r\n            var th = ths[colIndex];\r\n            var asc = $YetaWF.getElement1BySelector(\".tg_sorticon .tg_sortasc\", [th]);\r\n            var desc = $YetaWF.getElement1BySelector(\".tg_sorticon .tg_sortdesc\", [th]);\r\n            $YetaWF.elementToggleClass(asc, this.Setup.SortActiveCss, sortBy === SortByEnum.Ascending);\r\n            $YetaWF.elementToggleClass(desc, this.Setup.SortActiveCss, sortBy === SortByEnum.Descending);\r\n        }\r\n        private getSortColumn(): GridColumnDefinition | null {\r\n            for (let col of this.Setup.Columns) {\r\n                if (col.Sortable && col.Sort !== SortByEnum.NotSpecified)\r\n                    return col;\r\n            }\r\n            return null;\r\n        }\r\n        // Resizing\r\n        private static resizeColumn(ev: MouseEvent): boolean {\r\n            var currentControl = Grid.CurrentControl;\r\n            if (currentControl && currentControl.ColumnResizeHeader) {\r\n                var rect = currentControl.ColumnResizeHeader.getBoundingClientRect();\r\n                var w = ev.clientX - rect.left;\r\n                currentControl.ColumnResizeHeader.style.width = `${w}px`;\r\n            }\r\n            return false;\r\n        }\r\n        private static resizeColumnDone(ev: MouseEvent): boolean {\r\n            var currentControl = Grid.CurrentControl;\r\n            if (currentControl && currentControl.ColumnResizeBar && currentControl.ColumnResizeHeader) {\r\n                document.body.style.cursor = \"default\";\r\n                window.removeEventListener(\"mousemove\", this.resizeColumn, false);\r\n                window.removeEventListener(\"mouseup\", this.resizeColumnDone, false);\r\n\r\n                // save column widths after user resizes\r\n                if (currentControl.Setup.SettingsModuleGuid) {\r\n                    var colIndex = Array.prototype.indexOf.call((currentControl.ColumnResizeHeader.parentElement as HTMLElement).children, currentControl.ColumnResizeHeader);\r\n                    var options = {\r\n                        SettingsModuleGuid: currentControl.Setup.SettingsModuleGuid,\r\n                        Columns: [{\r\n                            Key: currentControl.Setup.Columns[colIndex].Name,\r\n                            Value: parseInt((currentControl.ColumnResizeHeader.style.width as string).replace(\"px\", \"\"), 0)\r\n                        }]\r\n                    };\r\n\r\n                    // send save request, we don't care about the response\r\n                    var request: XMLHttpRequest = new XMLHttpRequest();\r\n                    request.open(\"POST\", currentControl.Setup.SaveSettingsColumnWidthsUrl, true);\r\n                    request.setRequestHeader(\"Content-Type\", \"application/json\");\r\n                    request.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n                    //request.overrideMimeType(\"application/text\");// would help firefox understand this isn't xml, but it's not standard, oh well\r\n                    request.send(JSON.stringify(options));\r\n                }\r\n                currentControl.ColumnResizeBar = null;\r\n                currentControl.ColumnResizeHeader = null;\r\n            }\r\n            Grid.CurrentControl = null;\r\n            return false;\r\n        }\r\n\r\n        // reloading\r\n        private reload(page: number, newPageSize?: number, overrideColFilter?: OverrideColumnFilter, overrideExtraData?: any|null|undefined, sort?: boolean, done?: () => void): void {\r\n\r\n            if (!this.reloadInProgress) {\r\n\r\n                this.setReloading(true);\r\n\r\n                if (this.Setup.StaticData && !sort) {\r\n                    // show/hide selected rows\r\n                    if (this.Setup.PageSize > 0) {\r\n                        var trs = $YetaWF.getElementsBySelector(\"tr:not(.tg_emptytr)\", [this.TBody]);\r\n                        for (let tr of trs) {\r\n                            tr.setAttribute(\"style\", \"display:none\");\r\n                        }\r\n                        var len = trs.length;\r\n                        var count = 0;\r\n                        for (var i = page * this.Setup.PageSize; i < len; ++i) {\r\n                            if (count >= (newPageSize || this.Setup.PageSize))\r\n                                break;\r\n                            trs[i].removeAttribute(\"style\");\r\n                            // init any controls that just became visible\r\n                            $YetaWF.processActivateDivs([trs[i]]);\r\n                            ++count;\r\n                        }\r\n                    }\r\n                    this.Setup.Page = page;\r\n                    if (this.InputPage)\r\n                        this.InputPage.value = this.Setup.Page + 1;\r\n                    this.updateStatus();\r\n                    this.setReloading(false);\r\n                } else {\r\n                    // fetch data from servers\r\n                    var uri = $YetaWF.parseUrl(this.Setup.AjaxUrl);\r\n                    uri.addSearch(\"fieldPrefix\", this.Setup.FieldName);\r\n                    uri.addSearch(\"skip\", page * this.Setup.PageSize);\r\n                    uri.addSearch(\"take\", newPageSize || this.Setup.PageSize);\r\n                    if (this.Setup.ExtraData)\r\n                        uri.addSearchSimpleObject(this.Setup.ExtraData);\r\n                    // sort order\r\n                    var col = this.getSortColumn();\r\n                    if (col) {\r\n                        uri.addSearch(\"sort[0].field\", col.Name);\r\n                        uri.addSearch(\"sort[0].order\", (col.Sort === SortByEnum.Descending ? 1 : 0));\r\n                        // also add as \"sorts\" for controllers that prefer this name\r\n                        uri.addSearch(\"sorts[0].field\", col.Name);\r\n                        uri.addSearch(\"sorts[0].order\", (col.Sort === SortByEnum.Descending ? 1 : 0));\r\n                    }\r\n                    // filters\r\n                    var colIndex = 0;\r\n                    var fcount = 0;\r\n                    for (let col of this.Setup.Columns) {\r\n                        var val = this.getColSortValue(colIndex);\r\n                        if (val !== null && val !== \"\") {\r\n                            var oper = col.FilterOp;\r\n                            if (overrideColFilter && overrideColFilter.ColIndex === colIndex)\r\n                                oper = overrideColFilter.FilterOp;\r\n                            if (oper != null) {\r\n                                uri.addSearch(`filters[${fcount}].field`, col.Name);\r\n                                uri.addSearch(`filters[${fcount}].operator`, this.GetFilterOpString(oper));\r\n                                uri.addSearch(`filters[${fcount}].valueAsString`, val);\r\n                                ++fcount;\r\n                            }\r\n                        }\r\n                        ++colIndex;\r\n                    }\r\n                    uri.addFormInfo(this.Control);\r\n\r\n                    if (this.Setup.StaticData)\r\n                        uri.addSearch(\"data\", JSON.stringify(this.Setup.StaticData));\r\n\r\n                    var request: XMLHttpRequest = new XMLHttpRequest();\r\n                    request.open(\"POST\", this.Setup.AjaxUrl);\r\n                    request.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\r\n                    request.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n                    request.onreadystatechange = (ev: Event): any => {\r\n                        if (request.readyState === 4 /*DONE*/) {\r\n                            this.setReloading(false);\r\n                            $YetaWF.processAjaxReturn(request.responseText, request.statusText, request, undefined, undefined, (result: string) => {\r\n                                var partial: GridPartialResult = JSON.parse(request.responseText);\r\n                                $YetaWF.processClearDiv(this.TBody);\r\n                                this.TBody.innerHTML = \"\";\r\n                                $YetaWF.appendMixedHTML(this.TBody, partial.TBody, true);\r\n                                this.Setup.Records = partial.Records;\r\n                                this.Setup.Pages = partial.Pages;\r\n                                this.Setup.Page = partial.Page;\r\n                                this.Setup.PageSize = partial.PageSize;\r\n                                if (this.InputPage)\r\n                                    this.InputPage.value = this.Setup.Page + 1;\r\n                                if (this.Setup.NoSubmitContents) {\r\n                                    this.SubmitCheckCol = this.getSubmitCheckCol();\r\n                                    if (this.SubmitCheckCol >= 0)\r\n                                        this.setInitialSubmitStatus();\r\n                                }\r\n                                this.updateStatus();\r\n                                if (done)\r\n                                    done();\r\n                            });\r\n                        }\r\n                    };\r\n                    var data = uri.toFormData();\r\n                    request.send(data);\r\n                }\r\n            }\r\n        }\r\n        private setReloading(on: boolean): void {\r\n            this.reloadInProgress = on;\r\n            $YetaWF.setLoading(on);\r\n            if (this.LoadingDiv) {\r\n                if (on)\r\n                    this.LoadingDiv.setAttribute(\"style\", \"\");\r\n                else\r\n                    this.LoadingDiv.setAttribute(\"style\", \"display:none\");\r\n            }\r\n        }\r\n        private updateStatus(): void {\r\n            if (this.PagerTotals) {\r\n                var totals: string;\r\n                if (this.Setup.Records === 0)\r\n                    totals = YLocs.YetaWF_ComponentsHTML.GridTotalNone;\r\n                else {\r\n                    if (this.Setup.PageSize === 0) {\r\n                        var first = 1;\r\n                        last = this.Setup.Records;\r\n                        if (first > last)\r\n                            totals = YLocs.YetaWF_ComponentsHTML.GridTotal0.format(this.Setup.Records);\r\n                        else\r\n                            totals = YLocs.YetaWF_ComponentsHTML.GridTotals.format(first, last, this.Setup.Records);\r\n                    } else {\r\n                        var first = this.Setup.Page * this.Setup.PageSize + 1;\r\n                        var last = first + this.Setup.PageSize - 1;\r\n                        if (first > last)\r\n                            totals = YLocs.YetaWF_ComponentsHTML.GridTotal0.format(this.Setup.Records);\r\n                        else {\r\n                            first = Math.max(0, first);\r\n                            last = Math.min(last, this.Setup.Records);\r\n                            totals = YLocs.YetaWF_ComponentsHTML.GridTotals.format(first, last, this.Setup.Records);\r\n                        }\r\n                    }\r\n                }\r\n                this.PagerTotals.innerHTML = `<span>${totals}</span>`;\r\n            }\r\n            if (this.BtnTop) $YetaWF.elementToggleClass(this.BtnTop, this.Setup.DisabledCss, this.Setup.Page <= 0);\r\n            if (this.BtnPrev) $YetaWF.elementToggleClass(this.BtnPrev, this.Setup.DisabledCss, this.Setup.Page <= 0);\r\n            if (this.BtnNext) $YetaWF.elementToggleClass(this.BtnNext, this.Setup.DisabledCss, this.Setup.Page >= this.Setup.Pages - 1);\r\n            if (this.BtnBottom) $YetaWF.elementToggleClass(this.BtnBottom, this.Setup.DisabledCss, this.Setup.Page >= this.Setup.Pages - 1);\r\n\r\n            // show/hide \"No Records\"\r\n            if (this.Setup.StaticData) {\r\n                if (this.Setup.Records === 0) {\r\n                    $YetaWF.getElement1BySelector(\"tr.tg_emptytr\", [this.TBody]).style.display = \"\";\r\n                } else {\r\n                    $YetaWF.getElement1BySelector(\"tr.tg_emptytr\", [this.TBody]).style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n        private updatePage(): void {\r\n            if (this.Setup.PageSize > 0)\r\n                this.Setup.Pages = Math.max(1, Math.floor((this.Setup.Records - 1) / this.Setup.PageSize) + 1);\r\n        }\r\n\r\n        // Filtering\r\n        private clearFilterMenuHighlights(ulElem: HTMLElement): void {\r\n            var menuLis = $YetaWF.getElementsBySelector(`li.${this.Setup.HighlightCss}`, [ulElem]);\r\n            for (let menuLi of menuLis)\r\n                $YetaWF.elementRemoveClass(menuLi, this.Setup.HighlightCss);\r\n        }\r\n        public menuSelected(menuElem: HTMLElement, colIndex: number): void {\r\n            // update column structure\r\n            var sel = Number($YetaWF.getAttribute(menuElem, \"data-sel\"));\r\n            // new filter\r\n            var overrideColFilter: OverrideColumnFilter = {\r\n                ColIndex: colIndex,\r\n                FilterOp: sel\r\n            };\r\n            this.reload(0, undefined, overrideColFilter, undefined, undefined, () => {\r\n                // clear all highlights\r\n                var ulElem = $YetaWF.elementClosest(menuElem, \"ul\");\r\n                this.clearFilterMenuHighlights(ulElem);\r\n                // highlight new selection\r\n                $YetaWF.elementToggleClass(menuElem, this.Setup.HighlightCss, true);\r\n                // update button with new sort icon\r\n                if (this.FilterBar) {\r\n                    var icon = $YetaWF.getElement1BySelector(\".t_fmenuicon\", [menuElem]).innerHTML;\r\n                    var thsFilter = $YetaWF.getElementsBySelector(\"th\", [this.FilterBar]);\r\n                    var btn = $YetaWF.getElement1BySelector(\".tg_fmenu\", [thsFilter[colIndex]]);\r\n                    btn.innerHTML = icon;\r\n                }\r\n                // update column structures\r\n                this.Setup.Columns[colIndex].FilterOp = sel;\r\n            });\r\n        }\r\n        public static menuSelected(menuElem: HTMLElement, colIndex: number): void {\r\n            var popups = $YetaWF.elementClosest(menuElem, \".yt_grid_menus\");\r\n            var gridId = $YetaWF.getAttribute(popups, \"data-grid\");\r\n            var grid: Grid = YetaWF.ComponentBaseDataImpl.getControlById(gridId, YetaWF_ComponentsHTML.Grid.SELECTOR);\r\n            grid.menuSelected(menuElem, colIndex);\r\n        }\r\n        private addDirectFilterHandlers(): void {\r\n            for (let col of this.Setup.Columns) {\r\n                switch (col.FilterType) {\r\n                    default:\r\n                        break;\r\n                    case \"bool\":\r\n                    case \"enum\":\r\n                        // handle selection change\r\n                        $YetaWF.registerCustomEventHandlerDocument(\"dropdownlist_change\", `#${col.FilterId}`, (ev: Event): boolean => {\r\n                            this.reload(0);\r\n                            return false;\r\n                        });\r\n                        break;\r\n                    case \"long\":\r\n                    case \"decimal\":\r\n                    case \"datetime\":\r\n                    case \"date\":\r\n                    case \"text\":\r\n                    case \"guid\":\r\n                        // handle return key\r\n                        var elem = $YetaWF.getElementById(col.FilterId);\r\n                        $YetaWF.registerEventHandler(elem, \"keydown\", null, (ev: KeyboardEvent): boolean => {\r\n                            if (ev.keyCode === 13) { // Return\r\n                                this.reload(0);\r\n                                return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                }\r\n            }\r\n        }\r\n        private getColSortValue(colIndex: number): string | null {\r\n            var col = this.Setup.Columns[colIndex];\r\n            switch (col.FilterType) {\r\n                case null:\r\n                    return null;\r\n                case \"bool\":\r\n                    var dd: YetaWF_ComponentsHTML.DropDownListEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DropDownListEditComponent.SELECTOR);\r\n                    var boolVal: FilterBoolEnum = Number(dd.value);\r\n                    switch (boolVal) {\r\n                        default:\r\n                        case FilterBoolEnum.All: return null;\r\n                        case FilterBoolEnum.Yes: return \"True\";\r\n                        case FilterBoolEnum.No: return \"False\";\r\n                    }\r\n                case \"long\":\r\n                case \"text\":\r\n                case \"guid\":\r\n                    var edit = $YetaWF.getElementById(col.FilterId) as HTMLInputElement;\r\n                    return edit.value;\r\n                case \"dynenum\":\r\n                    //$$$$\r\n                    return null;\r\n                case \"decimal\":\r\n                    var dec: YetaWF_ComponentsHTML.DecimalEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DecimalEditComponent.SELECTOR);\r\n                    return dec.valueText;\r\n                case \"datetime\":\r\n                    var datetime: YetaWF_ComponentsHTML.DateTimeEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DateTimeEditComponent.SELECTOR);\r\n                    return datetime.valueText;\r\n                case \"date\":\r\n                    var date: YetaWF_ComponentsHTML.DateEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DateEditComponent.SELECTOR);\r\n                    return date.valueText;\r\n                case \"enum\":\r\n                    var dd: YetaWF_ComponentsHTML.DropDownListEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DropDownListEditComponent.SELECTOR);\r\n                    if (dd.value === \"-1\")\r\n                        return null;\r\n                    return dd.value;\r\n                default:\r\n                    throw `Unexpected filter type ${col.FilterType} for column ${colIndex}`;\r\n            }\r\n        }\r\n        private clearColSortValue(colIndex: number): void {\r\n            var col = this.Setup.Columns[colIndex];\r\n            switch (col.FilterType) {\r\n                case null:\r\n                    break;\r\n                case \"bool\":\r\n                    var dd: YetaWF_ComponentsHTML.DropDownListEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DropDownListEditComponent.SELECTOR);\r\n                    dd.clear();\r\n                    break;\r\n                case \"long\":\r\n                case \"text\":\r\n                case \"guid\":\r\n                    var edit = $YetaWF.getElementById(col.FilterId) as HTMLInputElement;\r\n                    edit.value = \"\";\r\n                    break;\r\n                case \"dynenum\":\r\n                    //$$$$\r\n                    break;\r\n                case \"decimal\":\r\n                    var dec: YetaWF_ComponentsHTML.DecimalEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DecimalEditComponent.SELECTOR);\r\n                    dec.clear();\r\n                    break;\r\n                case \"datetime\":\r\n                    var datetime: YetaWF_ComponentsHTML.DateTimeEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DateTimeEditComponent.SELECTOR);\r\n                    datetime.clear();\r\n                    break;\r\n                case \"date\":\r\n                    var date: YetaWF_ComponentsHTML.DateEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DateEditComponent.SELECTOR);\r\n                    date.clear();\r\n                    break;\r\n                case \"enum\":\r\n                    var dd: YetaWF_ComponentsHTML.DropDownListEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(col.FilterId, DropDownListEditComponent.SELECTOR);\r\n                    dd.value = \"-1\";\r\n                    break;\r\n                default:\r\n                    throw `Unexpected filter type ${col.FilterType} for column ${colIndex}`;\r\n            }\r\n        }\r\n        private GetFilterOpString(op: FilterOptionEnum): string {\r\n            switch (op) {\r\n                case FilterOptionEnum.Equal: return \"==\";\r\n                case FilterOptionEnum.GreaterEqual: return \">=\";\r\n                case FilterOptionEnum.GreaterThan: return \">\";\r\n                case FilterOptionEnum.LessEqual: return \"<=\";\r\n                case FilterOptionEnum.LessThan: return \"<\";\r\n                case FilterOptionEnum.NotEqual: return \"!=\";\r\n                case FilterOptionEnum.StartsWith: return \"StartsWith\";\r\n                case FilterOptionEnum.NotStartsWith: return \"NotStartsWith\";\r\n                case FilterOptionEnum.Contains: return \"Contains\";\r\n                case FilterOptionEnum.NotContains: return \"NotContains\";\r\n                case FilterOptionEnum.Endswith: return \"EndsWith\";\r\n                case FilterOptionEnum.NotEndswith: return \"NotEndsWith\";\r\n            }\r\n            throw `Unexpected filter op ${op}`;\r\n        }\r\n        // add/remove (static grid)\r\n        private removeRecord(trElem: HTMLElement, recNum: number, colName: string) : void {\r\n            if (!this.Setup.StaticData) throw \"Static grids only\";\r\n            // get the message to display (if any)\r\n            var message = this.Setup.DeletedMessage;\r\n            if(message) {\r\n                if (colName) {\r\n                    var text = this.Setup.StaticData[recNum][colName];\r\n                    message = message.format(text);\r\n                }\r\n            }\r\n\r\n            // remove the record\r\n            this.RemoveRecord(recNum);\r\n\r\n            // show the message\r\n            if(message)\r\n                    $YetaWF.message(message);\r\n        }\r\n        private resequenceDelete(recNum: number): void {\r\n            // resequence origin\r\n            var trs = $YetaWF.getElementsBySelector(\"tr[data-origin]\", [this.TBody]) as HTMLTableRowElement[];\r\n            for (let tr of trs) {\r\n                var orig = Number($YetaWF.getAttribute(tr, \"data-origin\"));\r\n                if (orig >= recNum) {\r\n                    $YetaWF.setAttribute(tr, \"data-origin\", (orig-1).toString());\r\n                    // update all indexes for input/select fields to match record origin (TODO: check whether we should only update last index in field)\r\n                    this.renumberFields(tr, orig, orig - 1);\r\n                }\r\n            }\r\n        }\r\n        private resequence(): void {\r\n            // resequence origin\r\n            var trs = $YetaWF.getElementsBySelector(\"tr[data-origin]\", [this.TBody]) as HTMLTableRowElement[];\r\n            var index = 0;\r\n            for (let tr of trs) {\r\n                var orig = Number($YetaWF.getAttribute(tr, \"data-origin\"));\r\n                $YetaWF.setAttribute(tr, \"data-origin\", index.toString());\r\n                // update all indexes for input/select fields to match record origin (TODO: check whether we should only update last index in field)\r\n                this.renumberFields(tr, orig, index);\r\n                ++index;\r\n            }\r\n        }\r\n        private renumberFields(tr: HTMLTableRowElement, origNum: Number, newNum: Number) : void {\r\n            var inps = $YetaWF.getElementsBySelector(\"input[name],select[name]\", [tr]);\r\n            for (let inp of inps) {\r\n                var name = $YetaWF.getAttribute(inp, \"name\");\r\n                name = name.replace(`[${origNum}]`, `[${newNum}]`);\r\n                $YetaWF.setAttribute(inp, \"name\", name);\r\n            }\r\n        }\r\n\r\n        public internalDestroy(): void {\r\n            if (this.Setup.CanFilter) {\r\n                // close all menus\r\n                var menuDiv = $YetaWF.getElementById(`${this.ControlId}_menus`);\r\n                var menus = $YetaWF.getElementsBySelector(\".tg_fentry .k-menu\", [menuDiv]);\r\n                for (let menu of menus) {\r\n                    var menuData = $(menu).data(\"kendoMenu\");\r\n                    menuData.destroy();\r\n                }\r\n                // remove all menus\r\n                menuDiv.remove();\r\n            }\r\n        }\r\n\r\n        // API\r\n        get FieldName(): string {\r\n            return this.Setup.FieldName;\r\n        }\r\n        get StaticData(): any[] {\r\n            if (!this.Setup.StaticData) throw \"Static grids only\";\r\n            return this.Setup.StaticData;\r\n        }\r\n        get ExtraData(): any {\r\n            return this.Setup.ExtraData;\r\n        }\r\n        public AddRecord(tr: string, staticData: any): void {\r\n            if (!this.Setup.StaticData) throw \"Static grids only\";\r\n            $YetaWF.appendMixedHTML(this.TBody, tr, true);\r\n            var lastTr = this.TBody.lastChild as HTMLTableRowElement;\r\n            var origin = this.Setup.StaticData.length;\r\n            $YetaWF.setAttribute(lastTr, \"data-origin\", origin.toString());\r\n            this.renumberFields(lastTr, 0, origin);\r\n            this.Setup.StaticData.push(staticData);\r\n            this.Setup.Records++;\r\n            this.updatePage();\r\n            this.reload(Math.max(0, this.Setup.Pages - 1));\r\n            this.updateStatus();\r\n        }\r\n        public RemoveRecord(index: number): void {\r\n            if (!this.Setup.StaticData) throw \"Static grids only\";\r\n            if (index < 0 || index >= this.Setup.StaticData.length) throw `Index ${index} out of bounds`;\r\n            var tr = $YetaWF.getElement1BySelector(`tr[data-origin='${index.toString()}']`, [this.TBody]);\r\n            tr.remove();\r\n            this.Setup.StaticData.splice(index, 1);\r\n            this.Setup.Records--;\r\n            this.resequenceDelete(index);\r\n            this.updatePage();\r\n            this.reload(Math.max(0, this.Setup.Pages - 1));\r\n            this.updateStatus();\r\n        }\r\n        private moveRawRecord(sel: number, index: number): void { // tr index (not data-origin index)\r\n            if (!this.Setup.StaticData) throw \"Static grids only\";\r\n            if (sel < 0 || sel >= this.Setup.StaticData.length) throw `Index sel=${sel} out of bounds`;\r\n            if (index < 0 || index > this.Setup.StaticData.length) throw `Index index=${index} out of bounds`;\r\n            if (index === sel || index === sel + 1) return;// nothing to move\r\n\r\n            var trs = $YetaWF.getElementsBySelector(\"tr:not(.tg_emptytr)\", [this.TBody]) as HTMLTableRowElement[];\r\n            var selTr = trs[sel];\r\n            // remove the static data record\r\n            var data = this.Setup.StaticData[sel];\r\n            this.Setup.StaticData.splice(sel, 1);\r\n            // remove the table row element\r\n            this.TBody.removeChild(selTr);\r\n            // insert the static data record at the new position\r\n            if (index > sel)--index;\r\n            if (index >= this.Setup.StaticData.length) {\r\n                this.Setup.StaticData.push(data);\r\n                this.TBody.appendChild(selTr);\r\n            } else {\r\n                this.Setup.StaticData.splice(index, 0, data);\r\n                this.TBody.insertBefore(selTr, this.TBody.children[index+1]); // take tg_empty into account\r\n            }\r\n            this.resequence();\r\n            this.updatePage();\r\n            this.updateStatus();\r\n        }\r\n        public SelectedIndex(): number {\r\n            var sel = $YetaWF.getElement1BySelectorCond(`tr.${this.Setup.RowHighlightCss},tr.${this.Setup.RowDragDropHighlightCss}`, [this.TBody]);\r\n            if (sel == null) return -1;\r\n            var trs = $YetaWF.getElementsBySelector(\"tr:not(.tg_emptytr)\", [this.TBody]) as HTMLTableRowElement[];\r\n            var rowIndex = Array.prototype.indexOf.call(trs, sel);\r\n            return rowIndex;\r\n        }\r\n        public ClearSelection(): void {\r\n            var sel = $YetaWF.getElement1BySelectorCond(`tr.${this.Setup.RowHighlightCss},tr.${this.Setup.RowDragDropHighlightCss}`, [this.TBody]);\r\n            if (sel) {\r\n                $YetaWF.elementToggleClass(sel, this.Setup.RowHighlightCss, false);\r\n                $YetaWF.elementToggleClass(sel, this.Setup.RowDragDropHighlightCss, false);\r\n            }\r\n        }\r\n        public GetRecord(index: number): any {\r\n            if (!this.Setup.StaticData) throw \"Static grids only\";\r\n            if (index < 0 || index >= this.Setup.StaticData.length) throw `Index ${index} out of bounds`;\r\n            return this.Setup.StaticData[index];\r\n        }\r\n        public GetTR(index: number): HTMLTableRowElement {\r\n            if (this.Setup.StaticData) throw \"Ajax grids only\";\r\n            if (index < 0 || index >= this.TBody.children.length) throw `Index ${index} out of bounds`;\r\n            return this.TBody.children[index] as HTMLTableRowElement;\r\n        }\r\n        public HitTest(x: number, y: number): number {\r\n            if (!this.Setup.StaticData) throw \"Static grids only\";\r\n            var trs = $YetaWF.getElementsBySelector(\"tr:not(.tg_emptytr)\", [this.TBody]) as HTMLTableRowElement[];\r\n            var index = 0;\r\n            for (let tr of trs) {\r\n                var rect = tr.getBoundingClientRect();\r\n                if (x < rect.left || x > rect.left + rect.width)\r\n                    return -1;\r\n                if (y < rect.top)\r\n                    return -1;\r\n                if (y < rect.top + rect.height)\r\n                    return index;\r\n                ++index;\r\n            }\r\n            return -1;\r\n        }\r\n        public HitTestInsert(x: number, y: number): number {\r\n            if (!this.Setup.StaticData) throw \"Static grids only\";\r\n            var trs = $YetaWF.getElementsBySelector(\"tr:not(.tg_emptytr)\", [this.TBody]) as HTMLTableRowElement[];\r\n            var index = 0;\r\n            for (let tr of trs) {\r\n                var rect = tr.getBoundingClientRect();\r\n                if (x < rect.left || x > rect.left + rect.width)\r\n                    return -1;\r\n                if (y < rect.top)\r\n                    return -1;\r\n                if (y < rect.top + rect.height/2)\r\n                    return index;\r\n                ++index;\r\n                if (y < rect.top + rect.height)\r\n                    return index;\r\n            }\r\n            return -1;\r\n        }\r\n        /**\r\n         * Reloads the grid in its entirety using the provided extradata. The extradata is only saved in the grid if reloading is successful.\r\n         * The callback is called if the grid is successfully reloaded.\r\n         */\r\n        public ReloadAll(overrideExtraData?: any, successful?: () => void): void {\r\n            if (this.Setup.StaticData) throw \"Ajax grids only\";\r\n            this.reload(0, undefined, undefined, overrideExtraData, false, (): void => {\r\n                // successful\r\n                if (overrideExtraData)\r\n                    this.Setup.ExtraData = overrideExtraData;\r\n                if (successful)\r\n                    successful();\r\n            });\r\n        }\r\n    }\r\n\r\n    // A <div> is being emptied. Destroy all grids, menus the <div> may contain.\r\n    $YetaWF.registerClearDiv((tag: HTMLElement): void => {\r\n        YetaWF.ComponentBaseDataImpl.clearDiv<Grid>(tag, Grid.SELECTOR, (grid: Grid): void => {\r\n            // remove grid control\r\n            grid.internalDestroy();\r\n        });\r\n    });\r\n}\r\n"]}