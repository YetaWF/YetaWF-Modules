{"version":3,"sources":["Addons/YetaWF/ComponentsHTML/_Templates/MultiString/MultiStringEdit.ts"],"names":[],"mappings":"AAEA,kBAAU,qBAAqB,CAAC;IAE5B,UAAiB,YAAY;QACzB,SAAS,EAAE,MAAM,EAAE,CAAC;KACvB;IACD,UAAiB,eAAe;QAC5B,YAAY,EAAE,OAAO,CAAC;KACzB;IAKD,MAAa,wBAAyB,SAAQ,MAAM,CAAC,qBAAqB;QAEtE,gBAAuB,QAAQ,EAAE,MAAM,CAA4B;QAGnE,OAAO,CAAC,UAAU,CAAkD;QACpE,OAAO,CAAC,SAAS,CAAmB;oBAExB,SAAS,EAAE,MAAM;QAkDtB,MAAM,CAAC,OAAO,EAAE,OAAO,GAAG,IAAI;QAI9B,KAAK,IAAI,IAAI;iBAOhB,YAAY,EAAI,MAAM;QAItB,KAAK,EAAI,MAAM;QAqCZ,UAAU,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO;QAiBxC,OAAO,CAAC,gBAAgB;KAI3B;CAOJ","file":"MultiStringEdit.d.ts","sourcesContent":["/* Copyright Â© 2019 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/ComponentsHTML#License */\r\n\r\nnamespace YetaWF_ComponentsHTML {\r\n\r\n    export interface IPackageLocs {\r\n        Languages: string[];\r\n    }\r\n    export interface IPackageConfigs {\r\n        Localization: boolean;\r\n    }\r\n\r\n    //interface Setup {\r\n    //}\r\n\r\n    export class MultiStringEditComponent extends YetaWF.ComponentBaseDataImpl {\r\n\r\n        public static readonly SELECTOR: string = \".yt_multistring.t_edit\";\r\n\r\n        //private Setup: Setup;\r\n        private SelectLang: YetaWF_ComponentsHTML.DropDownListEditComponent;\r\n        private InputText: HTMLInputElement;\r\n\r\n        constructor(controlId: string/*, setup: Setup*/) {\r\n            super(controlId);\r\n            //this.Setup = setup;\r\n\r\n            this.SelectLang = YetaWF.ComponentBaseDataImpl.getControlFromSelector(\"select\", DropDownListEditComponent.SELECTOR, [this.Control]);\r\n            this.InputText = $YetaWF.getElement1BySelector(\"input.yt_multistring_text\", [this.Control]) as HTMLInputElement;\r\n\r\n            // selection change (put language specific text into text box)\r\n            this.SelectLang.Control.addEventListener(\"dropdownlist_change\", (evt: Event): void => {\r\n                var sel = this.SelectLang.selectedIndex;\r\n                var hid = $YetaWF.getElement1BySelector(`input[name$='[${sel}].value']`, [this.Control]) as HTMLInputElement;\r\n                var newText = hid.value;\r\n                if (newText.length === 0 && sel > 0) {\r\n                    var hid0 = $YetaWF.getElement1BySelector(\"input[name$='[0].value']\", [this.Control]) as HTMLInputElement;\r\n                    newText = hid0.value;\r\n                    hid.value = newText;\r\n                }\r\n                this.InputText.value = newText;\r\n            });\r\n\r\n            // textbox change (save text in language specific hidden fields)\r\n            $YetaWF.registerEventHandler(this.InputText, \"input\", null, (ev: Event): boolean => {\r\n                var sel = this.SelectLang.selectedIndex;\r\n                var newText = this.InputText.value;\r\n                var hid = $YetaWF.getElement1BySelector(`input[name$='[${sel}].value']`, [this.Control]) as HTMLInputElement;\r\n                hid.value = newText;\r\n                if (sel === 0)\r\n                    this.SelectLang.enable(newText.length > 0);\r\n                return false;\r\n            });\r\n            $YetaWF.registerEventHandler(this.InputText, \"blur\", null, (ev: Event): boolean => {\r\n                var sel = this.SelectLang.selectedIndex;\r\n                if (sel === 0) {\r\n                    var hid0 = $YetaWF.getElement1BySelector(\"input[name$='[0].value']\", [this.Control]) as HTMLInputElement;\r\n                    var text = hid0.value;\r\n                    if (text.length === 0) {\r\n                        // the default text was cleared, clear all languages\r\n                        var count = YLocs.YetaWF_ComponentsHTML.Languages.length;\r\n                        for (var index = 0; index < count; ++index) {\r\n                            var hid = $YetaWF.getElement1BySelector(`input[name$='[${index}].value']`, [this.Control]) as HTMLInputElement;\r\n                            hid.value = \"\";\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n\r\n        // API\r\n\r\n        public enable(enabled: boolean): void {\r\n            $YetaWF.elementEnableToggle(this.InputText, enabled);\r\n            this.SelectLang.enable(enabled && YConfigs.YetaWF_ComponentsHTML.Localization);\r\n        }\r\n        public clear(): void {\r\n            this.SelectLang.clear();\r\n            var hids = $YetaWF.getElementsBySelector(`input[name$='.value']`, [this.Control]) as HTMLInputElement[];\r\n            for (let hid of hids)\r\n                hid.value = \"\";\r\n            this.InputText.value = \"\";\r\n        }\r\n        get defaultValue(): string {\r\n            var hid0 = $YetaWF.getElement1BySelector(\"input[name$='[0].value']\", [this.Control]) as HTMLInputElement;\r\n            return hid0.value;\r\n        }\r\n        get value(): object {\r\n            var data = {};\r\n\r\n            var newText = this.InputText.value;\r\n            var sel = this.SelectLang.selectedIndex;\r\n            var hid = $YetaWF.getElement1BySelector(`input[name$='[${sel}].value']`, [this.Control]) as HTMLInputElement;\r\n            hid.value = newText;\r\n\r\n            var count = YLocs.YetaWF_ComponentsHTML.Languages.length;\r\n            for (var index = 0; index < count; ++index) {\r\n                hid = $YetaWF.getElement1BySelector(`input[name$='[${index}].value']`, [this.Control]) as HTMLInputElement;\r\n                var langText = hid.value;\r\n                if (langText === \"\")\r\n                    langText = newText;\r\n                var lang = YLocs.YetaWF_ComponentsHTML.Languages[index];\r\n                data[lang] = langText;\r\n            }\r\n            return data;\r\n        }\r\n        set value(data: object) {\r\n            var textDefault = this.findLanguageText(data, YLocs.YetaWF_ComponentsHTML.Languages[0]);\r\n            var count = YLocs.YetaWF_ComponentsHTML.Languages.length;\r\n            for (var index = 0; index < count; ++index) {\r\n                var s = \"\";\r\n                var lang = YLocs.YetaWF_ComponentsHTML.Languages[index];\r\n                var text = this.findLanguageText(data, lang);\r\n                if (text)\r\n                    s = text;\r\n                else if (textDefault)\r\n                    s = textDefault;// use default for languages w/o data\r\n                var hid = $YetaWF.getElement1BySelector(`input[name$='[${index}].value']`, [this.Control]) as HTMLInputElement;\r\n                hid.value = s;\r\n                if (index === 0)//$$$$ ???\r\n                    this.InputText.value = s;\r\n            }\r\n            this.SelectLang.clear();\r\n        }\r\n        public hasChanged(data: object): boolean {\r\n            var textDefault = this.findLanguageText(data, YLocs.YetaWF_ComponentsHTML.Languages[0]);\r\n            var count = YLocs.YetaWF_ComponentsHTML.Languages.length;\r\n            for (var index = 0; index < count; ++index) {\r\n                var hid = $YetaWF.getElement1BySelector(`input[name$='[${index}].value']`, [this.Control]) as HTMLInputElement;\r\n                var langText = hid.value;\r\n                if (langText === \"\")\r\n                    langText = textDefault||\"\";\r\n                var lang = YLocs.YetaWF_ComponentsHTML.Languages[index];\r\n                var ms = this.findLanguageText(data, lang);\r\n                if (!ms)\r\n                    ms = textDefault;\r\n                if (!$YetaWF.stringCompare(ms, langText))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n        private findLanguageText(data: object, lang: string): string | null {\r\n            if (!data.hasOwnProperty(lang)) return null;\r\n            return data[lang];\r\n        }\r\n    }\r\n    if (YLocs.YetaWF_ComponentsHTML.Languages === undefined) throw \"YLocs.YetaWF_ComponentsHTML.Languages missing\";/*DEBUG*/\r\n\r\n    // A <div> is being emptied. Destroy all controls the <div> may contain.\r\n    $YetaWF.registerClearDiv((tag: HTMLElement): void => {\r\n        MultiStringEditComponent.clearDiv(tag, MultiStringEditComponent.SELECTOR);\r\n    });\r\n}\r\n\r\n\r\n"]}