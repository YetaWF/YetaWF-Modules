{"version":3,"sources":["AddOns/YetaWF/ComponentsHTML/_Templates/PropertyList/PropertyList.ts"],"names":[],"mappings":"AAEA,kBAAU,qBAAqB,CAAC;IAE5B,UAAU,WAAW;QACjB,EAAE,EAAE,MAAM,CAAC;QACX,QAAQ,EAAE,MAAM,EAAE,CAAC;QACnB,UAAU,EAAE,SAAS,EAAE,CAAC;KAC3B;IACD,UAAU,SAAS;QACf,IAAI,EAAE,MAAM,CAAC;QACb,OAAO,EAAE,OAAO,CAAC;QAEjB,aAAa,EAAE,UAAU,EAAE,CAAC;QAC5B,UAAU,EAAE,UAAU,EAAE,CAAC;KAC5B;IACD,UAAU,UAAU;QAChB,WAAW,EAAE,MAAM,CAAC;QACpB,SAAS,EAAE,aAAa,CAAC;QACzB,WAAW,EAAE,GAAG,CAAC;KACpB;IACD,KAAK,aAAa;QACd,aAAa,IAAI;QACjB,gBAAgB,IAAI;QACpB,gBAAgB,KAAK;QACrB,mBAAmB,KAAK;QACxB,SAAS,MAAM;QACf,YAAY,MAAM;KACrB;IAmBD,MAAa,qBAAqB;QAE9B,OAAO,CAAC,OAAO,CAAiB;QAChC,OAAO,CAAC,WAAW,CAAc;QACjC,OAAO,CAAC,mBAAmB,CAAqB;oBAEpC,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,WAAW;QAmCvD,OAAO,CAAC,cAAc;QAoBtB;;WAEG;QACH,OAAO,CAAC,MAAM;QAoCd,OAAO,CAAC,MAAM;QAoBd,OAAO,CAAC,WAAW;eA8GL,YAAY,CAAC,GAAG,EAAE,WAAW,GAAG,OAAO;eAMvC,aAAa,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,GAAE,IAAI;eAiB7E,YAAY,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,GAAE,IAAI;KAuB7F;CAmDJ","file":"PropertyList.d.ts","sourcesContent":["/* Copyright Â© 2019 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/ComponentsHTML#License */\r\n\r\nnamespace YetaWF_ComponentsHTML {\r\n\r\n    interface ControlData {\r\n        Id: string; // id of the property list div\r\n        Controls: string[];\r\n        Dependents: Dependent[];\r\n    }\r\n    interface Dependent {\r\n        Prop: string; // Name of property\r\n        Disable: boolean; // defines whether the control is disabled instead of hidden\r\n\r\n        ProcessValues: ValueEntry[];\r\n        HideValues: ValueEntry[];\r\n    }\r\n    interface ValueEntry {\r\n        ControlProp: string; // name of controlling property (ProcIf)\r\n        ValueType: ValueTypeEnum;\r\n        ValueObject: any;\r\n    }\r\n    enum ValueTypeEnum {\r\n        EqualIntValue = 0,\r\n        EqualStringValue = 1,\r\n        NotEqualIntValue = 10,\r\n        NotEqualStringValue = 11,\r\n        EqualNull = 100,\r\n        EqualNonNull = 101,\r\n    }\r\n\r\n    enum ValidityEnum {\r\n        ControllingNotShown = 0,\r\n        Valid = 1,\r\n        Invalid = 2,\r\n    }\r\n\r\n    interface ControlItem {\r\n        Name: string;\r\n        ControlType: ControlTypeEnum;\r\n        Object: DropDownListEditComponent | HTMLInputElement | HTMLSelectElement;\r\n    }\r\n    enum ControlTypeEnum {\r\n        Input = 0,\r\n        Select = 1,\r\n        KendoSelect = 2,\r\n    }\r\n\r\n    export class PropertyListComponent {\r\n\r\n        private Control: HTMLDivElement;\r\n        private ControlData: ControlData;\r\n        private ControllingControls: ControlItem[] = [];\r\n\r\n        constructor(controlId: string, controlData: ControlData) {\r\n\r\n            this.Control = $YetaWF.getElementById(controlId) as HTMLDivElement;\r\n            this.ControlData = controlData;\r\n\r\n            // Handle change events\r\n            var controlData = this.ControlData;\r\n            for (let control of controlData.Controls) {\r\n                var controlItem = this.getControlItem(control);\r\n                this.ControllingControls.push(controlItem);\r\n                switch (controlItem.ControlType) {\r\n                    case ControlTypeEnum.Input:\r\n                        $YetaWF.registerMultipleEventHandlers([(controlItem.Object as HTMLInputElement)], [\"change\", \"input\"], null, (ev: Event): boolean => {\r\n                            this.update();\r\n                            return false;\r\n                        });\r\n                        break;\r\n                    case ControlTypeEnum.Select:\r\n                        $YetaWF.registerEventHandler((controlItem.Object as HTMLSelectElement), \"change\", null, (ev: Event): boolean => {\r\n                            this.update();\r\n                            return false;\r\n                        });\r\n                        break;\r\n                    case ControlTypeEnum.KendoSelect:\r\n                        $YetaWF.registerCustomEventHandler(controlItem.Object as DropDownListEditComponent, \"dropdownlist_change\", (evt: Event): void => {\r\n                            this.update();\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // Initialize initial form\r\n            this.update();\r\n        }\r\n\r\n        private getControlItem(control: string): ControlItem {\r\n            var elemSel = $YetaWF.getElement1BySelectorCond(`.t_row.t_${control.toLowerCase()} select[name$='${control}']`, [this.Control]) as HTMLSelectElement | null;\r\n            if (elemSel) {\r\n                var kendoSelect = YetaWF.ComponentBaseDataImpl.getControlFromTagCond<DropDownListEditComponent>(elemSel, DropDownListEditComponent.SELECTOR);\r\n                if (kendoSelect) {\r\n                    // Kendo\r\n                    return { Name: control, ControlType: ControlTypeEnum.KendoSelect, Object: kendoSelect };\r\n                } else {\r\n                    // Native\r\n                    return { Name: control, ControlType: ControlTypeEnum.Select, Object: elemSel };\r\n                }\r\n            } else {\r\n                var elemInp = $YetaWF.getElement1BySelectorCond(`.t_row.t_${control.toLowerCase()} input[name$='${control}']`, [this.Control]) as HTMLInputElement | null;\r\n                if (elemInp) {\r\n                    return { Name: control, ControlType: ControlTypeEnum.Input, Object: elemInp };\r\n                }\r\n            }\r\n            throw `No control found for ${control}`;\r\n        }\r\n\r\n        /**\r\n         * Update all dependent fields.\r\n         */\r\n        private update(): void {\r\n\r\n            // for each dependent, verify that all its conditions are true\r\n            var deps = this.ControlData.Dependents;\r\n            for (let dep of deps) {\r\n\r\n                var depRow = $YetaWF.getElement1BySelectorCond(`.t_row.t_${dep.Prop.toLowerCase()}`, [this.Control]);// the propertylist row affected\r\n                if (!depRow)\r\n                    continue;\r\n\r\n                var hidden = false;\r\n                for (let value of dep.HideValues) {// hidden hides only, it never makes it visible (use process for that instead)\r\n                    var validity = this.getValidity(dep, value);\r\n                    switch (validity) {\r\n                        case ValidityEnum.ControllingNotShown:\r\n                        case ValidityEnum.Valid:\r\n                            this.toggle(dep, depRow, false);\r\n                            hidden = true;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if (!hidden) {\r\n                    var valid: boolean = false;\r\n                    for (let value of dep.ProcessValues) {\r\n                        var validity = this.getValidity(dep, value);\r\n                        if (validity === ValidityEnum.Valid) {\r\n                            valid = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    this.toggle(dep, depRow, valid);\r\n                }\r\n            }\r\n        }\r\n        private toggle(dep: Dependent, depRow: HTMLElement, valid: boolean): void {\r\n            if (dep.Disable) {\r\n                $YetaWF.elementAndChildrenEnableToggle(depRow, valid);\r\n            } else {\r\n                if (valid) {\r\n                    depRow.style.display = \"\";\r\n                    $YetaWF.processActivateDivs([depRow]);// init any controls that just became visible\r\n                } else\r\n                    depRow.style.display = \"none\";\r\n            }\r\n            var affected = $YetaWF.getElementsBySelector(\"input,select,textarea\", [depRow]);\r\n            if (valid) {\r\n                for (let e of affected)\r\n                    $YetaWF.elementRemoveClass(e, YConfigs.Forms.CssFormNoValidate);\r\n            } else {\r\n                for (let e of affected)\r\n                    $YetaWF.elementAddClass(e, YConfigs.Forms.CssFormNoValidate);\r\n            }\r\n        }\r\n\r\n        private getValidity(dep: Dependent, value: ValueEntry): ValidityEnum {\r\n            var valid = false; // we assume not valid unless we find a matching entry\r\n            // get the controlling control's value\r\n            var ctrlIndex = this.ControlData.Controls.indexOf(value.ControlProp);\r\n            if (ctrlIndex < 0)\r\n                throw `Dependent ${dep.Prop} references controlling control ${value.ControlProp} which doesn't exist`;\r\n            var controlItem = this.ControllingControls[ctrlIndex];\r\n\r\n            var controlValue;\r\n            switch (controlItem.ControlType) {\r\n                case ControlTypeEnum.Input:\r\n                    var inputElem = controlItem.Object as HTMLInputElement;\r\n                    var controlRow = $YetaWF.elementClosest(inputElem, \".t_row\");\r\n                    if (controlRow.style.display === \"\") {\r\n                        if (inputElem.type.toLowerCase() === \"checkbox\") {\r\n                            controlValue = inputElem.checked ? \"1\" : \"0\";\r\n                        } else {\r\n                            controlValue = inputElem.value;\r\n                        }\r\n                        valid = true;\r\n                    }\r\n                    break;\r\n                case ControlTypeEnum.Select:\r\n                    var selectElem = controlItem.Object as HTMLSelectElement;\r\n                    var controlRow = $YetaWF.elementClosest(selectElem, \".t_row\");\r\n                    if (controlRow.style.display === \"\") {\r\n                        controlValue = selectElem.value;\r\n                        valid = true;\r\n                    }\r\n                    break;\r\n                case ControlTypeEnum.KendoSelect:\r\n                    var dropdownList = controlItem.Object as DropDownListEditComponent;\r\n                    var controlRow = $YetaWF.elementClosest(dropdownList.Control, \".t_row\");\r\n                    if (controlRow.style.display === \"\") {\r\n                        controlValue = dropdownList.value;\r\n                        valid = true;\r\n                    }\r\n                    break;\r\n            }\r\n            if (!valid)\r\n                return ValidityEnum.ControllingNotShown;\r\n\r\n            if (valid) {\r\n                // test condition\r\n                switch (value.ValueType) {\r\n                    case ValueTypeEnum.EqualIntValue:\r\n                        // need one matching value\r\n                        var intValues = value.ValueObject as number[];\r\n                        var found = false;\r\n                        for (let intValue of intValues) {\r\n                            if (intValue === Number(controlValue)) {\r\n                                found = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!found)\r\n                            valid = false;\r\n                        break;\r\n                    case ValueTypeEnum.EqualStringValue:\r\n                        // need one matching value\r\n                        var strValues = value.ValueObject as string[];\r\n                        var found = false;\r\n                        for (let strValue of strValues) {\r\n                            if (strValue === controlValue) {\r\n                                found = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!found)\r\n                            valid = false;\r\n                        break;\r\n                    case ValueTypeEnum.NotEqualIntValue:\r\n                        // need one matching value\r\n                        var intValues = value.ValueObject as number[];\r\n                        var found = false;\r\n                        for (let intValue of intValues) {\r\n                            if (intValue !== Number(controlValue)) {\r\n                                found = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!found)\r\n                            valid = false;\r\n                        break;\r\n                    case ValueTypeEnum.NotEqualStringValue:\r\n                        // need one matching value\r\n                        var strValues = value.ValueObject as string[];\r\n                        var found = false;\r\n                        for (let strValue of strValues) {\r\n                            if (strValue !== controlValue) {\r\n                                found = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!found)\r\n                            valid = false;\r\n                        break;\r\n                    case ValueTypeEnum.EqualNonNull:\r\n                        if (!controlValue || controlValue.length === 0)\r\n                            valid = false;\r\n                        break;\r\n                    case ValueTypeEnum.EqualNull:\r\n                        if (controlValue)\r\n                            valid = false;\r\n                        break;\r\n                }\r\n            }\r\n            return valid ? ValidityEnum.Valid : ValidityEnum.Invalid;\r\n        }\r\n\r\n        public static isRowVisible(tag: HTMLElement): boolean {\r\n            var row = $YetaWF.elementClosestCond(tag, \".t_row\");\r\n            if (!row) return false;\r\n            return row.style.display === \"\";\r\n        }\r\n\r\n        public static tabInitjQuery(tabCtrlId: string, activeTab: number, activeTabId: string):void {\r\n            ComponentsHTMLHelper.MUSTHAVE_JQUERYUI();\r\n            var tabCtrl = $YetaWF.getElementById(tabCtrlId);\r\n            $YetaWF.elementAddClass(tabCtrl, \"t_jquery\");\r\n            $(tabCtrl).tabs({ //jQuery-ui use\r\n                active: activeTab,\r\n                activate: (ev: Event, ui: JQueryUI.TabsActivationUIParams): void => {\r\n                    if (ui.newPanel !== undefined) {\r\n                        $YetaWF.processActivateDivs([ui.newPanel[0]]);\r\n                        $YetaWF.processPanelSwitched(ui.newPanel[0]);\r\n                        if (activeTabId) {\r\n                            $(`#${activeTabId}`).val( (ui.newTab.length > 0) ?  Number(ui.newTab.attr(\"data-tab\")) : -1);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        public static tabInitKendo(tabCtrlId: string, activeTab: number, activeTabId: string):void {\r\n            // mark the active tab with .k-state-active before initializing the tabstrip\r\n            var tabs = $YetaWF.getElementsBySelector(`#${tabCtrlId}>ul>li`);\r\n            for (let tab of tabs) {\r\n                $YetaWF.elementRemoveClass(tab, \"k-state-active\");\r\n            }\r\n            $YetaWF.elementAddClass(tabs[activeTab], \"k-state-active\");\r\n\r\n            // init tab control\r\n            var tabCtrl = $YetaWF.getElementById(tabCtrlId);\r\n            $YetaWF.elementAddClass(tabCtrl, \"t_kendo\");\r\n            $(tabCtrl).kendoTabStrip({\r\n                animation: false,\r\n                activate: (ev: kendo.ui.TabStripActivateEvent): void  => {\r\n                    if (ev.contentElement !== undefined) {\r\n                        $YetaWF.processActivateDivs([ev.contentElement as HTMLElement]);\r\n                        $YetaWF.processPanelSwitched(ev.contentElement as HTMLElement);\r\n                        if (activeTabId)\r\n                            $(`#${activeTabId}`).val( $(ev.item as HTMLElement).attr(\"data-tab\") as string );\r\n                    }\r\n                }\r\n            }).data(\"kendoTabStrip\");\r\n        }\r\n    }\r\n\r\n    $YetaWF.registerClearDiv((tag: HTMLElement): void => {\r\n        var list = $YetaWF.getElementsBySelector(\".yt_propertylisttabbed.t_jquery\", [tag]);\r\n        for (let el of list) {\r\n            var tabsJq = $(el);\r\n            if (!tabsJq) throw \"No jquery ui object found\";/*DEBUG*/\r\n            tabsJq.tabs(\"destroy\");\r\n        }\r\n        list = $YetaWF.getElementsBySelector(\".yt_propertylisttabbed.t_kendo\", [tag]);\r\n        for (let el of list) {\r\n            var tabsKn = $(el).data(\"kendoTabStrip\");\r\n            if (!tabsKn) throw \"No kendo object found\";/*DEBUG*/\r\n            tabsKn.destroy();\r\n        }\r\n    });\r\n\r\n    // The property list needs a bit of special love when it's made visible. Because panels have no width/height\r\n    // while the propertylist is not visible (jquery implementation), when a propertylist is made visible using show(),\r\n    // the default panel is not sized correctly. If you explicitly show() a propertylist that has never been visible,\r\n    // call the following to cause the propertylist to be resized correctly:\r\n    // ComponentsHTML.processPropertyListVisible(div);\r\n    // div is any HTML element - all items (including child items) are checked for propertylists.\r\n\r\n    ComponentsHTMLHelper.registerPropertyListVisible((tag: HTMLElement): void => {\r\n        // jquery tabs\r\n        var tabsJq = $YetaWF.getElementsBySelector(\".ui-tabs\", [tag]);\r\n        for (let tabJq of tabsJq) {\r\n            var id = tabJq.id;\r\n            if (id === undefined) throw \"No id on tab control\";/*DEBUG*/\r\n            var tabidJq = Number($(tabJq).tabs(\"option\", \"active\"));\r\n            if (tabidJq >= 0) {\r\n                var panel = $YetaWF.getElement1BySelector(`#${id}_tab${tabidJq}`, [tabJq]);\r\n                $YetaWF.processActivateDivs([panel]);\r\n                $YetaWF.processPanelSwitched(panel);\r\n            }\r\n        }\r\n        // kendo tabs\r\n        var tabsKn = $YetaWF.getElementsBySelector(\".k-widget.k-tabstrip\", [tag]);\r\n        for (let tabKn of tabsKn) {\r\n            var id = tabKn.id;\r\n            if (id === undefined) throw \"No id on tab control\";/*DEBUG*/\r\n            var ts = $(tabKn).data(\"kendoTabStrip\");\r\n            var tabidKn = Number(ts.select().attr(\"data-tab\"));\r\n            if (tabidKn >= 0) {\r\n                var panel = $YetaWF.getElement1BySelector(`#${id}-tab${+tabidKn + 1}`, [tabKn]);\r\n                $YetaWF.processActivateDivs([panel]);\r\n                $YetaWF.processPanelSwitched(panel);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n"]}