{"version":3,"sources":["AddOns/YetaWF/ComponentsHTML/_Addons/Forms/FormsImpl.ts"],"names":[],"mappings":"AAIA,kBAAU,qBAAqB,CAAC;IAE5B,MAAa,SAAU,YAAW,MAAM,CAAC,UAAU;QAI/C;;WAEG;QACI,eAAe,CAAC,WAAW,EAAE,WAAW,GAAG,IAAI;QAiB/C,sBAAsB,EAAE,OAAO,CAAS;QAE/C;;WAEG;QACI,gBAAgB,CAAC,GAAG,EAAE,WAAW,GAAG,IAAI;QAK/C;;WAEG;QACI,eAAe,CAAC,IAAI,EAAE,WAAW,GAAG,IAAI;QAM/C;;WAEG;QACI,SAAS,CAAC,IAAI,EAAE,WAAW,GAAG,OAAO;QAK5C;;WAEG;QACI,UAAU,CAAC,IAAI,EAAE,WAAW,GAAG,IAAI;QAwB1C;;WAEG;QACH,OAAO,CAAC,gBAAgB;QAMxB;;WAEG;QACI,kBAAkB,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM,CAAC,aAAa,EAAE;QAcxE;;WAEG;QACI,QAAQ,CAAC,IAAI,EAAE,eAAe,GAAG,IAAI;QAG5C;;WAEG;QACI,OAAO,CAAC,IAAI,EAAE,eAAe,GAAG,OAAO;QAG9C;;WAEG;QACI,aAAa,CAAC,OAAO,EAAE,WAAW,GAAG,IAAI;QAsBhD;;;WAGG;QACI,QAAQ,CAAC,GAAG,EAAE,WAAW,GAAG,IAAI;QAgBvC;;;WAGG;QACI,cAAc,IAAI,IAAI;KA4DhC;CACJ;AAGD,QAAA,IAAI,gBAAgB,EAAE,MAAM,CAAC,UAAkD,CAAC","file":"FormsImpl.d.ts","sourcesContent":["/* Copyright Â© 2019 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/ComponentsHTML#License */\r\n\r\n/* Forms implementation required by YetaWF */\r\n\r\nnamespace YetaWF_ComponentsHTML {\r\n\r\n    export class FormsImpl implements YetaWF.IFormsImpl {\r\n\r\n        // Partialform Initialization\r\n\r\n        /**\r\n         * Initializes a partialform.\r\n         */\r\n        public initPartialForm(partialForm: HTMLElement): void {\r\n            // get all fields with errors (set server-side)\r\n            var $partialForm = $(partialForm);\r\n            var $errs = $(\".field-validation-error\", $partialForm);\r\n            // add warning icons to validation errors\r\n            $errs.each((index: number, element: HTMLElement): void => {\r\n                var $val = $(element);\r\n                var name = $val.attr(\"data-valmsg-for\");\r\n                var $err = $(`img.${YConfigs.Forms.CssWarningIcon}[name=\"${name}\"]`, $val.closest(\"form\"));\r\n                $err.remove();\r\n                $val.before(`<img src=\"${$YetaWF.htmlAttrEscape(YConfigs.Forms.CssWarningIconUrl)}\" name=${name} class=\"${YConfigs.Forms.CssWarningIcon}\" ${YConfigs.Basics.CssTooltip}=\"${$YetaWF.htmlAttrEscape($val.text())}\"/>`);\r\n            });\r\n        }\r\n\r\n        // Validation\r\n\r\n        // when we display a popup for the error summary, the focus loss causes validation to occur. We suppress updating icons if dontUpdateWarningIcons == true\r\n        public dontUpdateWarningIcons: boolean = false;\r\n\r\n        /**\r\n         * Re-validate all fields within the div, typically used after paging in a grid to let jquery.validate update all fields\r\n         */\r\n        public updateValidation(div: HTMLElement): void {\r\n            var $div = $(div);\r\n            ($ as any).validator.unobtrusive.parse($div);\r\n            $(\"input,select,textarea\", $div).has(\"[data-val=true]\").trigger(\"focusout\");\r\n        }\r\n        /**\r\n         * Validates one elements.\r\n         */\r\n        public validateElement(ctrl: HTMLElement): void {\r\n            var form = $YetaWF.Forms.getFormCond(ctrl);\r\n            if (form === null) return;\r\n            ($(form) as any).validate().element($(ctrl));\r\n        }\r\n\r\n        /**\r\n         * Returns whether a div has form errors.\r\n         */\r\n        public hasErrors(elem: HTMLElement): boolean {\r\n            var $elem = $(elem);\r\n            return $(\".validation-summary-errors li\", $elem).length > 0;\r\n        }\r\n\r\n        /**\r\n         * Shows all div form errors in a popup.\r\n         */\r\n        public showErrors(elem: HTMLElement): void {\r\n            var $elem = $(elem);\r\n            var $summary: JQuery<HTMLElement> = this.formErrorSummary($elem);\r\n            var $list = $(\"ul li\", $summary);\r\n\r\n            // only show unique messages (no duplicates)\r\n            var list: string[] = [];\r\n            $list.each((index:number, element: HTMLElement) :void => {\r\n                list.push($(element).text());\r\n            });\r\n            var uniqueMsgs: string[] = [];\r\n            $.each(list, (i: number, el: string) : void => {\r\n                if ($.inArray(el, uniqueMsgs) === -1) uniqueMsgs.push(el);\r\n            });\r\n\r\n            // build output\r\n            var s: string = \"\";\r\n            $.each(uniqueMsgs, (i: number, el: string) : void => {\r\n                s += el + \"(+nl)\";\r\n            });\r\n            this.dontUpdateWarningIcons = true;\r\n            $YetaWF.error(YLocs.Forms.FormErrors + s);\r\n            this.dontUpdateWarningIcons = false;\r\n        }\r\n        /**\r\n         * Returns the form's error summary (div).\r\n         */\r\n        private formErrorSummary($form: JQuery<HTMLElement>): JQuery<HTMLElement> {\r\n            var $summary = $(\".validation-summary-errors\", $form);\r\n            if ($summary.length !== 1) throw \"Error summary not found\";/*DEBUG*/\r\n            return $summary;\r\n        }\r\n\r\n        /**\r\n         * Serializes the form and returns a name/value pairs array\r\n         */\r\n        public serializeFormArray(form: HTMLFormElement): YetaWF.NameValuePair[] {\r\n            // disable all fields that we don't want to submit (marked with YConfigs.Forms.CssFormNoSubmit)\r\n            var $disabledFields = $(\".\" + YConfigs.Forms.CssFormNoSubmit, $(form)).not(\":disabled\");\r\n            $disabledFields.attr(\"disabled\", \"disabled\");\r\n            // disable all input fields in containers (usually grids) - we don't want to submit them - they're collected separately\r\n            var $disabledGridFields = $(`.${YConfigs.Forms.CssFormNoSubmitContents} input,.${YConfigs.Forms.CssFormNoSubmitContents} select`, $(form)).not(\":disabled\");\r\n            $disabledGridFields.attr(\"disabled\", \"disabled\");\r\n            // serialize the form\r\n            var formData = $(form).serializeArray();\r\n            // and enable all the input fields we just disabled\r\n            $disabledFields.removeAttr(\"disabled\");\r\n            $disabledGridFields.removeAttr(\"disabled\");\r\n            return formData;\r\n        }\r\n        /**\r\n         * Validate all fields in the current form.\r\n         */\r\n        public validate(form: HTMLFormElement): void {\r\n            ($(form) as any).validate();\r\n        }\r\n        /**\r\n         * Returns whether all fields in the current form are valid.\r\n         */\r\n        public isValid(form: HTMLFormElement): boolean {\r\n            return ($(form) as any).valid();\r\n        }\r\n        /**\r\n         * If there is a validation in the specified tab control, the tab is activated.\r\n         */\r\n        public setErrorInTab(tabctrl: HTMLElement): void {\r\n            var $tabctrl = $(tabctrl);\r\n            // get the first field in error (if any)\r\n            var errField = $YetaWF.getElement1BySelectorCond(\".input-validation-error\", [tabctrl]);\r\n            if (errField) {\r\n                // find out which tab panel we're on\r\n                var ttabpanel = $YetaWF.elementClosest(errField, \"div.t_tabpanel\");\r\n                var panel = ttabpanel.getAttribute(\"data-tab\") as number | null;\r\n                if (!panel) throw \"We found a panel in a tab control without panel number (data-tab attribute).\";/*DEBUG*/\r\n                // get the tab entry\r\n                var $te = $(\"ul.t_tabstrip > li\", $tabctrl).eq(panel);\r\n                if ($te.length === 0) throw \"We couldn't find the tab entry for panel \" + panel;/*DEBUG*/\r\n                if (YVolatile.Forms.TabStyle === YetaWF.TabStyleEnum.JQuery)\r\n                    $tabctrl.tabs(\"option\", \"active\", panel);\r\n                else if (YVolatile.Forms.TabStyle === YetaWF.TabStyleEnum.Kendo)\r\n                    $tabctrl.data(\"kendoTabStrip\").activateTab($te);\r\n                else throw \"Unknown tab style\";/*DEBUG*/\r\n            }\r\n        }\r\n\r\n        // Forms initialization\r\n\r\n        /**\r\n         * Initialize the form when page/content is ready.\r\n         * No external use.\r\n         */\r\n        public initForm(tag: HTMLElement): void {\r\n\r\n            var $tag = $(tag);\r\n            ($ as any).validator.unobtrusive.parse($(\"form\", $tag));\r\n            ($(\"form\", $tag) as any).addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();\r\n\r\n            var $forms = $(\"form\", $tag).filter(\".yValidateImmediately\");\r\n            if ($forms.length > 0) {\r\n                $forms.each((index: number, elem: HTMLElement) => {\r\n                    var f: any = $(elem);\r\n                    f.validate();\r\n                    f.valid(); // force all fields to show valid/not valid\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Initialize overall form validation.\r\n         * No external use.\r\n         */\r\n        public initValidation(): void {\r\n\r\n            $(document).ready(() => {\r\n\r\n                // running this overrides some jQuery Validate stuff so we can hook into its validations.\r\n                // triggerElementValidationsOnFormValidation is optional and will fire off all of your\r\n                // element validations WHEN the form validation runs ... it requires jquery.validate.unobtrusive\r\n                ($(\"form\") as any).addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();\r\n\r\n                // You can bind to events that the forms/elements trigger on validation\r\n                //$('form').bind('formValidation', function (event, element, result) {\r\n                //    console.log(['validation ran for form:', element, 'and the result was:', result]);\r\n                //});\r\n\r\n                //// Or you can use the helper functions that we created for binding to these events\r\n                //$('form').formValidation(function (element, result) {\r\n                //    console.log(['validation ran for form:', element, 'and the result was:', result]);\r\n                //});\r\n\r\n                //$('input.something').elementValidation(function (element, result) {\r\n                //    console.log(['validation ran for element:', element, 'and the result was:', result]);\r\n                //});\r\n\r\n                //$('input#address').elementValidationSuccess(function (element) {\r\n                //    console.log(['validations just ran for this element and it was valid!', element]);\r\n                //});\r\n                // tslint:disable-next-line:typedef only-arrow-functions\r\n                $(\"body\").on(\"elementValidationError\", function (element) {\r\n                    var fi: FormsImpl = YetaWF_FormsImpl as FormsImpl;\r\n                    if (fi.dontUpdateWarningIcons) return;\r\n                    var input = element.target;\r\n                    var form = $YetaWF.Forms.getForm(input);\r\n                    var $form = $(form);\r\n                    var name = input.getAttribute(\"name\");\r\n                    // remove the error icon\r\n                    var $err = $(`img.${YConfigs.Forms.CssWarningIcon}[name=\"${name}\"]`, $form);\r\n                    $err.remove();\r\n                    // find the validation message\r\n                    var $val = $(`span.field-validation-error[data-valmsg-for=\"${name}\"]`, $form);// get the validation message (which follows the input field but is hidden via CSS)\r\n                    // some templates incorrectly add  @Html.ValidationMessageFor(m => Model) to the rendered template - THIS IS WRONG\r\n                    // rather than going back and testing each template, we'll just use the first validation error for the field we find.\r\n                    if ($val.length < 1) throw \"Validation message not found\";/*DEBUG*/\r\n                    // insert a new error icon\r\n                    $val.eq(0).before(`<img src=\"${$YetaWF.htmlAttrEscape(YConfigs.Forms.CssWarningIconUrl)}\" name=\"${name}\" class=\"${YConfigs.Forms.CssWarningIcon}\" ${YConfigs.Basics.CssTooltip}=\"${$YetaWF.htmlAttrEscape($val.text())}\"/>`);\r\n                });\r\n                // tslint:disable-next-line:typedef only-arrow-functions\r\n                $(\"body\").on(\"elementValidationSuccess\", function (element) {\r\n                    var fi: FormsImpl = YetaWF_FormsImpl as FormsImpl;\r\n                    if (fi.dontUpdateWarningIcons) return;\r\n                    var input = element.target;\r\n                    var form = $YetaWF.Forms.getForm(input);\r\n                    var $form = $(form);\r\n                    var name = input.getAttribute(\"name\");\r\n                    // remove the error icon\r\n                    var $err = $(`img.${YConfigs.Forms.CssWarningIcon}[name=\"${name}\"]`, $form);\r\n                    $err.remove();\r\n                });\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nvar YetaWF_FormsImpl: YetaWF.IFormsImpl = new YetaWF_ComponentsHTML.FormsImpl();\r\n\r\n/* Page load */\r\n$YetaWF.addWhenReady((YetaWF_FormsImpl as YetaWF_ComponentsHTML.FormsImpl).initForm);\r\n\r\n/* Initialize validation system */\r\n(YetaWF_FormsImpl as YetaWF_ComponentsHTML.FormsImpl).initValidation();\r\n"]}