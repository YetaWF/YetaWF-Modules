{"version":3,"sources":["Addons/YetaWF/ComponentsHTML/_Main/Tooltips.ts"],"names":[],"mappings":"AAEA,kBAAU,qBAAqB,CAAC;IAE5B;;OAEG;IACH,MAAa,QAAQ;QAEjB,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAsB;QACnD,OAAO,CAAC,QAAQ,CAAC,sBAAsB,CAA4B;QACnE,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAe;QAC1C,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAe;QAE3C,OAAO,CAAC,iBAAiB,CAA4B;QACrD,OAAO,CAAC,aAAa,CAA4B;QAEjD,OAAO,CAAC,YAAY,CAA2D;QAExE,IAAI,IAAI,IAAI;QAoGnB,OAAO,CAAC,qBAAqB;QAW7B,OAAO,CAAC,SAAS;QAUjB,OAAO,CAAC,WAAW;QAsEZ,cAAc,IAAI,IAAI;KAQhC;CACJ;AAED,QAAA,IAAI,kBAAkB,gCAAuC,CAAC","file":"Tooltips.d.ts","sourcesContent":["/* Copyright Â© 2019 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/ComponentsHTML#License */\r\n\r\nnamespace YetaWF_ComponentsHTML {\r\n\r\n    /**\r\n     * Implements a stand-alone tooltip so we don't need jqueryui/bootstrap\r\n     */\r\n    export class Tooltips {\r\n\r\n        private readonly TOOLTIPCLASS: string = \"yTooltip\";\r\n        private readonly TOOLTIPACTIVEELEMCLASS: string = \"yTooltipActive\";\r\n        private readonly fadeInTime: number = 200;\r\n        private readonly fadeOutTime: number = 200;\r\n\r\n        private activeTooltipElem: HTMLElement | null = null;\r\n        private activeTooltip: HTMLElement | null = null;\r\n\r\n        private CancelObject: CancelableFadeInOut = { Canceled: false, Active: false };\r\n\r\n        public init(): void {\r\n\r\n            const a2 = YConfigs.Basics.CssTooltip;\r\n            const a3 = YConfigs.Basics.CssTooltipSpan;\r\n            const noTooltips = this.getNoTooltipSelectors(YVolatile.Basics.CssNoTooltips);\r\n            const noTTImgSel = this.buildNoTT(\"img\", noTooltips);\r\n            const noTTASel = this.buildNoTT(\"a\", noTooltips);\r\n            const noTTISel = this.buildNoTT(\"i\", noTooltips);\r\n            const noTTMisc = `.ui-jqgrid span[${a2}],th[${a2}],span[${a3}],li[${a2}],div[${a2}]`;\r\n\r\n            const selectors = `label,input:not(.ui-button-disabled),a:not(.ui-button-disabled),${noTTImgSel},${noTTASel},${noTTISel},${noTTMisc}`;\r\n            const ddsel = \".k-list-container.k-popup li[data-offset-index]\";\r\n\r\n            $YetaWF.registerMultipleEventHandlersBody([\"mouseover\", \"click\"], `${selectors}`, (ev: Event): boolean => {\r\n\r\n                var elem: HTMLElement | null = ev.__YetaWFElem;\r\n\r\n                for (; ;) {\r\n                    if (!elem)\r\n                        return true;\r\n                    if (ev.type !== \"click\" && elem === this.activeTooltipElem)\r\n                        return true;\r\n                    if (!$YetaWF.elementMatches(elem, \":hover\") && $YetaWF.elementMatches(elem, \":focus\"))\r\n                        return true;\r\n                    if ($YetaWF.getAttributeCond(elem, \"disabled\"))\r\n                        return true;\r\n                    var s = $YetaWF.getAttributeCond(elem, YConfigs.Basics.CssTooltip) || $YetaWF.getAttributeCond(elem, YConfigs.Basics.CssTooltipSpan) || $YetaWF.getAttributeCond(elem, \"title\");\r\n                    if (s) {\r\n                        this.showTooltip(elem, s);\r\n                        return true;\r\n                    }\r\n                    if (elem.tagName !== \"IMG\" && elem.tagName !== \"I\")\r\n                        break;\r\n                    // we're in an IMG or I tag, find enclosing A (if any) and try again\r\n                    elem = $YetaWF.elementClosestCond(elem, noTTASel);\r\n                    if (!elem)\r\n                        return true;\r\n                    // if the a link is a menu, don't show a tooltip for the image because the tooltip would be in a bad location\r\n                    if ($YetaWF.elementClosestCond(elem, \".k-menu\"))\r\n                        return true;\r\n                }\r\n                // nothing so far, check <a> to external site\r\n                if (elem.tagName === \"A\") {\r\n                    const anchor = elem as HTMLAnchorElement;\r\n                    const href = anchor.href;\r\n                    if (href === undefined || href.startsWith(\"javascript\") || href.startsWith(\"#\") || href.startsWith(\"mailto:\"))\r\n                        return true;\r\n                    if (anchor.target === \"_blank\") {\r\n                        const uri = $YetaWF.parseUrl(href);\r\n                        this.showTooltip(elem, YLocs.Basics.OpenNewWindowTT.format(uri.getHostName()));\r\n                        return true;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n            $YetaWF.registerEventHandlerBody(\"mousedown\", null, (ev: Event): boolean => {\r\n                this.removeTooltips();\r\n                return true;\r\n            });\r\n            $YetaWF.registerEventHandlerBody(\"mouseover\", `${ddsel}`, (ev: MouseEvent): boolean => {\r\n\r\n                var elem: HTMLElement = ev.__YetaWFElem;\r\n\r\n                // dropdown list - find who owns this and get the matching tooltip\r\n                // this is a bit hairy - we save all the tooltips for a dropdown list in a variable\r\n                // named ..id.._tooltips. The popup/dropdown is named ..id..-list so we deduce the\r\n                // variable name from the popup/dropdown. This is going to break at some point...\r\n                const ttindex = $YetaWF.getAttributeCond(elem, \"data-offset-index\");\r\n                if (!ttindex)\r\n                    return true;\r\n                const container = $YetaWF.elementClosestCond(elem, \".k-list-container.k-popup\");\r\n                if (!container)\r\n                    return true;\r\n                let id = container.id;\r\n                if (!id)\r\n                    return true;\r\n                id = id.replace(\"-list\", \"\");\r\n                var dd: DropDownListEditComponent = YetaWF.ComponentBaseDataImpl.getControlById(id, DropDownListEditComponent.SELECTOR);\r\n                let tip = dd.getToolTip(Number(ttindex));\r\n                if (!tip)\r\n                    return true;\r\n                this.showTooltip(elem, tip);\r\n                return true;\r\n            });\r\n            $YetaWF.registerEventHandlerBody(\"mouseout\", `.${this.TOOLTIPACTIVEELEMCLASS}`, (ev: MouseEvent): boolean => {\r\n                if (this.activeTooltip && this.activeTooltipElem && (ev.__YetaWFElem === this.activeTooltipElem && !this.activeTooltipElem.contains(ev.relatedTarget as HTMLElement))) {\r\n                    let elem = this.activeTooltip;\r\n                    if (ComponentsHTMLHelper.isActiveFadeInOut(this.CancelObject)) {\r\n                        ComponentsHTMLHelper.cancelFadeInOut(this.CancelObject);\r\n                        this.removeTooltips();\r\n                    } else {\r\n                        ComponentsHTMLHelper.fadeOut(this.activeTooltip, this.fadeOutTime, () => {\r\n                            if (elem === this.activeTooltip)\r\n                                this.removeTooltips();\r\n                        }, this.CancelObject);\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        private getNoTooltipSelectors(noTooltips: string): string[] {\r\n            var sel: string[] = [];\r\n            var classes = noTooltips.split(\" \");\r\n            for (const cls of classes) {\r\n                let c = cls.trim();\r\n                if (c.length > 0) {\r\n                    sel.push(c);\r\n                }\r\n            }\r\n            return sel;\r\n        }\r\n        private buildNoTT(sel: string, noTooltips: string[]): string {\r\n            var s = \"\";\r\n            for (const n of noTooltips) {\r\n                if (s.length)\r\n                    s += \",\";\r\n                s += `${sel}:not(${n})`;\r\n            }\r\n            return s;\r\n        }\r\n\r\n        private showTooltip(elem: HTMLElement, text: string): void {\r\n\r\n            if (this.activeTooltipElem) {\r\n                if (elem === this.activeTooltipElem)\r\n                    return;\r\n                this.removeTooltips();\r\n            }\r\n\r\n            let title = $YetaWF.getAttributeCond(elem, \"title\");\r\n            if (title) {\r\n                $YetaWF.setAttribute(elem, YConfigs.Basics.CssTooltip, title);\r\n                elem.removeAttribute(\"title\");\r\n            }\r\n\r\n            $YetaWF.elementAddClass(elem, this.TOOLTIPACTIVEELEMCLASS);\r\n            this.activeTooltipElem = elem;\r\n\r\n            var tooltip = document.createElement(\"div\");\r\n            tooltip.className = this.TOOLTIPCLASS;\r\n            tooltip.appendChild(document.createTextNode(text));\r\n            $YetaWF.setAttribute(tooltip, \"role\", \"tooltip\");\r\n\r\n            var firstChild = document.body.firstChild;\r\n            if (!firstChild) return;\r\n            firstChild.parentElement!.insertBefore(tooltip, firstChild);\r\n\r\n            this.activeTooltip = tooltip;\r\n\r\n            var winHeight = (window.innerHeight || document!.documentElement!.clientHeight);\r\n            var winWidth = (window.innerWidth || document!.documentElement!.clientWidth);\r\n\r\n            var elemRect = elem.getBoundingClientRect();\r\n            var ttTop = elemRect.top + elemRect.height;\r\n            var ttLeft = elemRect.left + elemRect.width;\r\n\r\n            // briefly show tooltip so we get the width & height\r\n            tooltip.style.display = \"block\";\r\n            var tooltipRect = tooltip.getBoundingClientRect();\r\n            tooltip.style.display = \"none\";\r\n            var ttWidth = tooltipRect.width;\r\n            var ttHeight = tooltipRect.height;\r\n\r\n            // check if it fits below\r\n            if (elemRect.bottom + ttHeight <= winHeight) {\r\n                // all is well, it fits below\r\n            } else if (elemRect.top - ttHeight >= 0 || elemRect.top + elemRect.height < winHeight / 2) {\r\n                // flip to top\r\n                ttTop = elemRect.top - ttHeight;\r\n            } else {\r\n                // default to bottom - it just doesn't fit\r\n            }\r\n            // make it fit if it extends beyond right edge of window\r\n            if (ttLeft + ttWidth > winWidth) {\r\n                let diff = (ttLeft + ttWidth) - winWidth;\r\n                ttLeft -= diff;\r\n                ttWidth += diff;\r\n            }\r\n\r\n            tooltip.setAttribute(\"style\", `top:${window.pageYOffset + ttTop}px;left:${window.pageXOffset + ttLeft}px;width:${ttWidth}px`);\r\n            if (ComponentsHTMLHelper.isActiveFadeInOut(this.CancelObject)) {\r\n                ComponentsHTMLHelper.cancelFadeInOut(this.CancelObject);\r\n                tooltip.style.display = \"block\";\r\n                tooltip.style.opacity = \"1\";\r\n            } else {\r\n                ComponentsHTMLHelper.fadeIn(tooltip, this.fadeInTime, this.CancelObject);\r\n            }\r\n        }\r\n\r\n        // API\r\n\r\n        public removeTooltips(): void {\r\n            if (this.activeTooltip)\r\n                this.activeTooltip.remove();\r\n            if (this.activeTooltipElem)\r\n                $YetaWF.elementRemoveClass(this.activeTooltipElem, this.TOOLTIPACTIVEELEMCLASS);\r\n            this.activeTooltipElem = null;\r\n            this.activeTooltip = null;\r\n        }\r\n    }\r\n}\r\n\r\nvar ToolTipsHTMLHelper = new YetaWF_ComponentsHTML.Tooltips();\r\n\r\n$YetaWF.registerDocumentReady((): void => {\r\n    ToolTipsHTMLHelper.init();\r\n});\r\n"]}