{"version":3,"sources":["Addons/YetaWF/ComponentsHTML/_Main/BasicsImpl.ts"],"names":[],"mappings":"AAIA,kBAAU,qBAAqB,CAAC;IAE5B,MAAa,UAAW,YAAW,MAAM,CAAC,WAAW;QAMjD,OAAO,CAAC,OAAO,CAAkB;iBAEtB,SAAS,EAAI,OAAO;QAIxB,UAAU,CAAC,EAAE,CAAC,EAAE,OAAO,GAAG,IAAI;QAcrC;;WAEG;QACI,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,IAAI,EAAE,OAAO,CAAC,EAAE,MAAM,CAAC,cAAc,GAAG,IAAI;QAGzG;;WAEG;QACI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,IAAI,EAAE,OAAO,CAAC,EAAE,MAAM,CAAC,cAAc,GAAG,IAAI;QAGvG;;WAEG;QACI,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,IAAI,EAAE,OAAO,CAAC,EAAE,MAAM,CAAC,cAAc,GAAG,IAAI;QAGzG;;WAEG;QACI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,IAAI,EAAE,OAAO,CAAC,EAAE,MAAM,CAAC,cAAc,GAAG,IAAI;QA0CvG,OAAO,CAAC,UAAU;QAclB;;WAEG;QACI,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,IAAI,EAAE,OAAO,CAAC,EAAE,MAAM,CAAC,cAAc,GAAG,IAAI;QA2DhI;;WAEG;QACI,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,GAAG,IAAI;QAmCzD;;WAEG;QACI,eAAe,IAAI,IAAI;QAM9B;;WAEG;QACI,aAAa,IAAI,IAAI;QAkB5B;;;;WAIG;QACI,mBAAmB,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,GAAG,IAAI;KAqBvE;CACJ;AAGD,QAAA,IAAI,iBAAiB,EAAE,MAAM,CAAC,WAAoD,CAAC","file":"BasicsImpl.d.ts","sourcesContent":["/* Copyright Â© 2019 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/ComponentsHTML#License */\r\n\r\n/* Basics implementation required by YetaWF */\r\n\r\nnamespace YetaWF_ComponentsHTML {\r\n\r\n    export class BasicsImpl implements YetaWF.IBasicsImpl {\r\n\r\n        // LOADING\r\n        // LOADING\r\n        // LOADING\r\n\r\n        private loading: boolean = false;\r\n\r\n        public get isLoading(): boolean {\r\n            return this.loading;\r\n        }\r\n\r\n        public setLoading(on?: boolean): void {\r\n            if (on !== false) {\r\n                this.loading = true;\r\n                ($ as any).prettyLoader.show();\r\n            } else {\r\n                this.loading = false;\r\n                ($ as any).prettyLoader.hide();\r\n            }\r\n        }\r\n\r\n        // MESSAGES\r\n        // MESSAGES\r\n        // MESSAGES\r\n\r\n        /**\r\n         * Displays an informational message, usually in a popup.\r\n         */\r\n        public message(message: string, title?: string, onOK?: () => void, options?: YetaWF.MessageOptions): void {\r\n            this.alert(message, title|| YLocs.Basics.DefaultSuccessTitle, onOK, options);\r\n        }\r\n        /**\r\n         * Displays an error message, usually in a popup.\r\n         */\r\n        public error(message: string, title?: string, onOK?: () => void, options?: YetaWF.MessageOptions): void {\r\n            this.alert(message, title || YLocs.Basics.DefaultErrorTitle, onOK);\r\n        }\r\n        /**\r\n         * Displays a confirmation message, usually in a popup.\r\n         */\r\n        public confirm(message: string, title?: string, onOK?: () => void, options?: YetaWF.MessageOptions): void {\r\n            this.alert(message, title || YLocs.Basics.DefaultSuccessTitle, onOK);\r\n        }\r\n        /**\r\n         * Displays an alert message, usually in a popup.\r\n         */\r\n        public alert(message: string, title?: string, onOK?: () => void, options?: YetaWF.MessageOptions): void {\r\n            // check if we already have a popup (and close it)\r\n            this.closeAlert(onOK);\r\n\r\n            $(\"body\").prepend(\"<div id='yalert'></div>\");\r\n            const $dialog = $(\"#yalert\");\r\n\r\n            options = options || { encoded: false };\r\n\r\n            if (!options.encoded) {\r\n                // change \\n to <br/>\r\n                $dialog.text(message);\r\n                var s = $dialog.html();\r\n                s = s.replace(/\\(\\+nl\\)/g, \"<br/>\");\r\n                $dialog.html(s);\r\n            } else {\r\n                $dialog.html(message);\r\n            }\r\n\r\n            if (title === undefined)\r\n                title = YLocs.Basics.DefaultAlertTitle;\r\n\r\n            $dialog.dialog({ //jQuery-ui use\r\n                autoOpen: true,\r\n                modal: true,\r\n                width: YConfigs.Basics.DefaultAlertWaitWidth,\r\n                height: YConfigs.Basics.DefaultAlertWaitHeight === 0 ? \"auto\" : YConfigs.Basics.DefaultAlertWaitHeight,\r\n                closeOnEscape: true,\r\n                closeText: YLocs.Basics.CloseButtonText,\r\n                close: (event: Event, ui: JQueryUI.DialogUIParams): void => this.closeAlert(onOK),\r\n                draggable: true,\r\n                resizable: false,\r\n                title: title,\r\n                buttons: [{\r\n                    text: YLocs.Basics.OKButtonText,\r\n                    click: (eventObject: JQueryEventObject): any => {\r\n                        $dialog.dialog(\"close\");\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n\r\n        private closeAlert(onOK?: () => void): void {\r\n            const $dialog = $(\"#yalert\");\r\n            if ($dialog.length === 0) return;\r\n            if ($dialog.attr(\"data-closing\")) return;\r\n            $dialog.attr(\"data-closing\", 1);\r\n            const endFunc = onOK;\r\n            onOK = undefined; // clear this so close function doesn't call onOK handler also\r\n            $dialog.dialog(\"close\");\r\n            $dialog.dialog(\"destroy\");\r\n            $dialog.remove();\r\n            if (endFunc)\r\n                endFunc();\r\n        }\r\n\r\n        /**\r\n         * Displays an alert message with Yes/No buttons, usually in a popup.\r\n         */\r\n        public alertYesNo(message: string, title?: string, onYes?: () => void, onNo?: () => void, options?: YetaWF.MessageOptions): void {\r\n\r\n            const $body = $(\"body\");\r\n            $body.prepend(\"<div id='yalert'></div>\");\r\n            const $dialog = $(\"#yalert\", $body);\r\n\r\n            // change \\n to <br/>\r\n            $dialog.text(message);\r\n            var s = $dialog.html();\r\n            s = s.replace(/\\(\\+nl\\)/g, \"<br/>\");\r\n            $dialog.html(s);\r\n\r\n            if (title === undefined)\r\n                title = YLocs.Basics.DefaultAlertYesNoTitle;\r\n\r\n            $dialog.dialog({ //jQuery-ui use\r\n                autoOpen: true,\r\n                modal: true,\r\n                width: YConfigs.Basics.DefaultAlertYesNoWidth,\r\n                height: YConfigs.Basics.DefaultAlertYesNoHeight === 0 ? \"auto\" : YConfigs.Basics.DefaultAlertYesNoHeight,\r\n                closeOnEscape: true,\r\n                closeText: YLocs.Basics.CloseButtonText,\r\n                close: (event: Event, ui: JQueryUI.DialogUIParams): void => {\r\n                    $dialog.dialog(\"destroy\");\r\n                    $dialog.remove();\r\n                    if (onNo !== undefined)\r\n                        onNo();\r\n                },\r\n                draggable: true,\r\n                resizable: false,\r\n                title: title,\r\n                buttons: [\r\n                    {\r\n                        text: YLocs.Basics.YesButtonText,\r\n                        click: (eventObject: JQueryEventObject): any => {\r\n                            const endFunc = onYes;\r\n                            onYes = undefined;// clear this so close function doesn't try do call these\r\n                            onNo = undefined;\r\n                            $dialog.dialog(\"destroy\");\r\n                            $dialog.remove();\r\n                            if (endFunc)\r\n                                endFunc();\r\n                        }\r\n                    },\r\n                    {\r\n                        text: YLocs.Basics.NoButtonText,\r\n                        click: (eventObject: JQueryEventObject): any => {\r\n                            const endFunc = onNo;\r\n                            onYes = undefined;// clear this so close function doesn't try do call these\r\n                            onNo = undefined;\r\n                            $dialog.dialog(\"destroy\");\r\n                            $dialog.remove();\r\n                            if (endFunc)\r\n                                endFunc();\r\n                        }\r\n                    }\r\n                ],\r\n            });\r\n        }\r\n        /**\r\n         * Displays a \"Please Wait\" message\r\n         */\r\n        public pleaseWait(message?: string, title?: string): void {\r\n            // insert <div id=\"yplwait\"></div> at top of page for the window\r\n            // this is automatically removed when destroy() is called\r\n            $(\"body\").prepend(\"<div id='yplwait'></div>\");\r\n            const $popupwin = $(\"#yplwait\");\r\n            var popup: kendo.ui.Window | null = null;\r\n\r\n            if (message === undefined)\r\n                message = YLocs.Basics.PleaseWaitText;\r\n            if (title === undefined)\r\n                title = YLocs.Basics.PleaseWaitTitle;\r\n            $popupwin.text(<string>message);\r\n\r\n            // Create the window\r\n            $popupwin.kendoWindow({\r\n                actions: [],\r\n                width: YConfigs.Basics.DefaultPleaseWaitWidth,\r\n                height: YConfigs.Basics.DefaultPleaseWaitHeight,\r\n                draggable: true,\r\n                iframe: true,\r\n                modal: true,\r\n                resizable: false,\r\n                title: $YetaWF.htmlEscape(title),\r\n                visible: false,\r\n                close: (event: kendo.ui.WindowCloseEvent): void => {\r\n                    var popup: kendo.ui.Window | null = $popupwin.data(\"kendoWindow\");\r\n                    popup.destroy();\r\n                    popup = null;\r\n                },\r\n            });\r\n\r\n            // show and center the window\r\n            popup = $popupwin.data(\"kendoWindow\");\r\n            popup.open().center();\r\n        }\r\n        /**\r\n         * Closes the \"Please Wait\" message (if any).\r\n         */\r\n        public pleaseWaitClose(): void {\r\n            const $popupwin = $(\"#yplwait\");\r\n            if ($popupwin.length === 0) return;\r\n            const popup = $popupwin.data(\"kendoWindow\");\r\n            popup.destroy();\r\n        }\r\n        /**\r\n         * Closes any open overlays, menus, dropdownlists, tooltips, etc. (Popup windows are not handled and are explicitly closed using $YetaWF.Popups)\r\n         */\r\n        public closeOverlays(): void {\r\n\r\n            // Close open bootstrap nav menus (if any) by clicking on the page\r\n            $(\"body\").trigger(\"click\");\r\n            // Close any open kendo menus (if any)\r\n            const $menus = $(\".k-menu\");\r\n            $menus.each((index: number, element: HTMLElement): void => {\r\n                const menu = $(element).data(\"kendoMenu\");\r\n                menu.close(\"li.k-item\");\r\n            });\r\n            // Close any open smartmenus\r\n            try {\r\n                ($(\".YetaWF_Menus\") as any).collapse(\"hide\");\r\n            } catch (e) { }\r\n\r\n            // tooltips\r\n            YetaWF_ComponentsHTML.Tooltips.removeTooltips();\r\n        }\r\n        /**\r\n         * Enable/disable an element.\r\n         * Some child items need some extra settings when disabled=disabled isn't enough.\r\n         * Also used to update visual styles to reflect the status.\r\n         */\r\n        public elementEnableToggle(elem: HTMLElement, enable: boolean): void {\r\n            if (elem.tagName === \"INPUT\") {\r\n                if (enable)\r\n                    $YetaWF.elementRemoveClass(elem, \"k-state-disabled\");\r\n                else\r\n                    $YetaWF.elementAddClass(elem, \"k-state-disabled\");\r\n            } else if (elem.tagName === \"SELECT\") {\r\n                if (enable)\r\n                    $YetaWF.elementRemoveClass(elem, \"k-state-disabled\");\r\n                else\r\n                    $YetaWF.elementAddClass(elem, \"k-state-disabled\");\r\n            } else if (elem.tagName === \"TEXTAREA\") {\r\n                if (enable) {\r\n                    elem.removeAttribute(\"readonly\");\r\n                    $YetaWF.elementRemoveClass(elem, \"k-state-disabled\");\r\n                } else {\r\n                    $YetaWF.setAttribute(elem, \"readonly\", \"readonly\");\r\n                    $YetaWF.elementAddClass(elem, \"k-state-disabled\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nvar YetaWF_BasicsImpl: YetaWF.IBasicsImpl = new YetaWF_ComponentsHTML.BasicsImpl();\r\n"]}